// Code generated by mockery v1.0.0. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	version "k8s.io/apimachinery/pkg/version"
)

// MockKubeClientConnector is an autogenerated mock type for the KubeClientConnector type
type MockKubeClientConnector struct {
	mock.Mock
}

// ClusterName provides a mock function with given fields:
func (_m *MockKubeClientConnector) ClusterName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreateResource provides a mock function with given fields: ctx, obj, into, opts
func (_m *MockKubeClientConnector) CreateResource(ctx context.Context, obj runtime.Object, into runtime.Object, opts *v1.CreateOptions) error {
	ret := _m.Called(ctx, obj, into, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Object, runtime.Object, *v1.CreateOptions) error); ok {
		r0 = rf(ctx, obj, into, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteResource provides a mock function with given fields: ctx, name, obj, opts
func (_m *MockKubeClientConnector) DeleteResource(ctx context.Context, name string, obj runtime.Object, opts *v1.DeleteOptions) error {
	ret := _m.Called(ctx, name, obj, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, runtime.Object, *v1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, obj, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetResource provides a mock function with given fields: ctx, name, into, opts
func (_m *MockKubeClientConnector) GetResource(ctx context.Context, name string, into runtime.Object, opts *v1.GetOptions) error {
	ret := _m.Called(ctx, name, into, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, runtime.Object, *v1.GetOptions) error); ok {
		r0 = rf(ctx, name, into, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSecret provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubeClientConnector) GetSecret(ctx context.Context, name string, namespace string) (*corev1.Secret, error) {
	ret := _m.Called(ctx, name, namespace)

	var r0 *corev1.Secret
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *corev1.Secret); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerVersion provides a mock function with given fields:
func (_m *MockKubeClientConnector) GetServerVersion() (*version.Info, error) {
	ret := _m.Called()

	var r0 *version.Info
	if rf, ok := ret.Get(0).(func() *version.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*version.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: ctx, into, opts
func (_m *MockKubeClientConnector) ListResources(ctx context.Context, into runtime.Object, opts *v1.ListOptions) error {
	ret := _m.Called(ctx, into, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Object, *v1.ListOptions) error); ok {
		r0 = rf(ctx, into, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResource provides a mock function with given fields: ctx, name, obj, into, opts
func (_m *MockKubeClientConnector) UpdateResource(ctx context.Context, name string, obj runtime.Object, into runtime.Object, opts *v1.UpdateOptions) error {
	ret := _m.Called(ctx, name, obj, into, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, runtime.Object, runtime.Object, *v1.UpdateOptions) error); ok {
		r0 = rf(ctx, name, obj, into, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
