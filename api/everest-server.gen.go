// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for BackupStorageType.
const (
	BackupStorageTypeAzure BackupStorageType = "azure"
	BackupStorageTypeGcs   BackupStorageType = "gcs"
	BackupStorageTypeS3    BackupStorageType = "s3"
)

// Defines values for CreateBackupStorageParamsType.
const (
	CreateBackupStorageParamsTypeAzure CreateBackupStorageParamsType = "azure"
	CreateBackupStorageParamsTypeGcs   CreateBackupStorageParamsType = "gcs"
	CreateBackupStorageParamsTypeS3    CreateBackupStorageParamsType = "s3"
)

// Defines values for DatabaseClusterRestoreStatusConditionsStatus.
const (
	False   DatabaseClusterRestoreStatusConditionsStatus = "False"
	True    DatabaseClusterRestoreStatusConditionsStatus = "True"
	Unknown DatabaseClusterRestoreStatusConditionsStatus = "Unknown"
)

// BackupStorage Backup storage information
type BackupStorage struct {
	BucketName string            `json:"bucketName"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	Region     string            `json:"region"`
	Type       BackupStorageType `json:"type"`
	Url        *string           `json:"url,omitempty"`
}

// BackupStorageType defines model for BackupStorage.Type.
type BackupStorageType string

// BackupStoragesList defines model for BackupStoragesList.
type BackupStoragesList = []BackupStorage

// CreateBackupStorageParams Backup storage parameters
type CreateBackupStorageParams struct {
	AccessKey string `json:"accessKey"`

	// BucketName The cloud storage bucket/container name
	BucketName string `json:"bucketName"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                        `json:"name"`
	Region    string                        `json:"region"`
	SecretKey string                        `json:"secretKey"`
	Type      CreateBackupStorageParamsType `json:"type"`
	Url       *string                       `json:"url,omitempty"`
}

// CreateBackupStorageParamsType defines model for CreateBackupStorageParams.Type.
type CreateBackupStorageParamsType string

// CreateKubernetesClusterParams kubernetes object
type CreateKubernetesClusterParams struct {
	Kubeconfig string  `json:"kubeconfig"`
	Name       string  `json:"name"`
	Namespace  *string `json:"namespace,omitempty"`
}

// DatabaseCluster DatabaseCluster is the Schema for the databases API.
type DatabaseCluster struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseSpec defines the desired state of Database.
	Spec *struct {
		// Backup Backup contains backup settings.
		Backup *struct {
			Annotations *map[string]string `json:"annotations,omitempty"`

			// ContainerSecurityContext SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
			ContainerSecurityContext *struct {
				// AllowPrivilegeEscalation AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
				AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

				// Capabilities The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
				Capabilities *struct {
					// Add Added capabilities
					Add *[]string `json:"add,omitempty"`

					// Drop Removed capabilities
					Drop *[]string `json:"drop,omitempty"`
				} `json:"capabilities,omitempty"`

				// Privileged Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
				Privileged *bool `json:"privileged,omitempty"`

				// ProcMount procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
				ProcMount *string `json:"procMount,omitempty"`

				// ReadOnlyRootFilesystem Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
				ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

				// RunAsGroup The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
				RunAsGroup *int64 `json:"runAsGroup,omitempty"`

				// RunAsNonRoot Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
				RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

				// RunAsUser The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
				RunAsUser *int64 `json:"runAsUser,omitempty"`

				// SeLinuxOptions The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
				SeLinuxOptions *struct {
					// Level Level is SELinux level label that applies to the container.
					Level *string `json:"level,omitempty"`

					// Role Role is a SELinux role label that applies to the container.
					Role *string `json:"role,omitempty"`

					// Type Type is a SELinux type label that applies to the container.
					Type *string `json:"type,omitempty"`

					// User User is a SELinux user label that applies to the container.
					User *string `json:"user,omitempty"`
				} `json:"seLinuxOptions,omitempty"`

				// SeccompProfile The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
				SeccompProfile *struct {
					// LocalhostProfile localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
					LocalhostProfile *string `json:"localhostProfile,omitempty"`

					// Type type indicates which kind of seccomp profile will be applied. Valid options are:
					//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
					Type string `json:"type"`
				} `json:"seccompProfile,omitempty"`

				// WindowsOptions The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
				WindowsOptions *struct {
					// GmsaCredentialSpec GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
					GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

					// GmsaCredentialSpecName GMSACredentialSpecName is the name of the GMSA credential spec to use.
					GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

					// HostProcess HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
					HostProcess *bool `json:"hostProcess,omitempty"`

					// RunAsUserName The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
					RunAsUserName *string `json:"runAsUserName,omitempty"`
				} `json:"windowsOptions,omitempty"`
			} `json:"containerSecurityContext,omitempty"`
			Enabled *bool   `json:"enabled,omitempty"`
			Image   *string `json:"image,omitempty"`

			// ImagePullPolicy PullPolicy describes a policy for if/when to pull a container image
			ImagePullPolicy  *string `json:"imagePullPolicy,omitempty"`
			ImagePullSecrets *[]struct {
				// Name Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
				Name *string `json:"name,omitempty"`
			} `json:"imagePullSecrets,omitempty"`
			InitImage *string            `json:"initImage,omitempty"`
			Labels    *map[string]string `json:"labels,omitempty"`

			// Resources ResourceRequirements describes the compute resource requirements.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
				//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
				//  This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
					Name string `json:"name"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]interface{} `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]interface{} `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
			Schedule *[]struct {
				CompressionLevel *int    `json:"compressionLevel,omitempty"`
				CompressionType  *string `json:"compressionType,omitempty"`
				Enabled          *bool   `json:"enabled,omitempty"`
				Keep             *int    `json:"keep,omitempty"`
				Name             *string `json:"name,omitempty"`
				Schedule         *string `json:"schedule,omitempty"`
				StorageName      *string `json:"storageName,omitempty"`
			} `json:"schedule,omitempty"`
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`
			Storages           *map[string]struct {
				// Affinity Affinity is a group of affinity scheduling rules.
				Affinity *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"affinity,omitempty"`
				Annotations *map[string]string `json:"annotations,omitempty"`

				// ContainerSecurityContext SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
				ContainerSecurityContext *struct {
					// AllowPrivilegeEscalation AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
					AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

					// Capabilities The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
					Capabilities *struct {
						// Add Added capabilities
						Add *[]string `json:"add,omitempty"`

						// Drop Removed capabilities
						Drop *[]string `json:"drop,omitempty"`
					} `json:"capabilities,omitempty"`

					// Privileged Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
					Privileged *bool `json:"privileged,omitempty"`

					// ProcMount procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
					ProcMount *string `json:"procMount,omitempty"`

					// ReadOnlyRootFilesystem Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
					ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

					// RunAsGroup The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
					RunAsGroup *int64 `json:"runAsGroup,omitempty"`

					// RunAsNonRoot Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
					RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

					// RunAsUser The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
					RunAsUser *int64 `json:"runAsUser,omitempty"`

					// SeLinuxOptions The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
					SeLinuxOptions *struct {
						// Level Level is SELinux level label that applies to the container.
						Level *string `json:"level,omitempty"`

						// Role Role is a SELinux role label that applies to the container.
						Role *string `json:"role,omitempty"`

						// Type Type is a SELinux type label that applies to the container.
						Type *string `json:"type,omitempty"`

						// User User is a SELinux user label that applies to the container.
						User *string `json:"user,omitempty"`
					} `json:"seLinuxOptions,omitempty"`

					// SeccompProfile The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
					SeccompProfile *struct {
						// LocalhostProfile localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
						LocalhostProfile *string `json:"localhostProfile,omitempty"`

						// Type type indicates which kind of seccomp profile will be applied. Valid options are:
						//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
						Type string `json:"type"`
					} `json:"seccompProfile,omitempty"`

					// WindowsOptions The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
					WindowsOptions *struct {
						// GmsaCredentialSpec GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
						GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

						// GmsaCredentialSpecName GMSACredentialSpecName is the name of the GMSA credential spec to use.
						GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

						// HostProcess HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
						HostProcess *bool `json:"hostProcess,omitempty"`

						// RunAsUserName The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
						RunAsUserName *string `json:"runAsUserName,omitempty"`
					} `json:"windowsOptions,omitempty"`
				} `json:"containerSecurityContext,omitempty"`
				Labels       *map[string]string `json:"labels,omitempty"`
				NodeSelector *map[string]string `json:"nodeSelector,omitempty"`

				// PodSecurityContext PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
				PodSecurityContext *struct {
					// FsGroup A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
					//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
					//  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
					FsGroup *int64 `json:"fsGroup,omitempty"`

					// FsGroupChangePolicy fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
					FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

					// RunAsGroup The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
					RunAsGroup *int64 `json:"runAsGroup,omitempty"`

					// RunAsNonRoot Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
					RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

					// RunAsUser The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
					RunAsUser *int64 `json:"runAsUser,omitempty"`

					// SeLinuxOptions The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
					SeLinuxOptions *struct {
						// Level Level is SELinux level label that applies to the container.
						Level *string `json:"level,omitempty"`

						// Role Role is a SELinux role label that applies to the container.
						Role *string `json:"role,omitempty"`

						// Type Type is a SELinux type label that applies to the container.
						Type *string `json:"type,omitempty"`

						// User User is a SELinux user label that applies to the container.
						User *string `json:"user,omitempty"`
					} `json:"seLinuxOptions,omitempty"`

					// SeccompProfile The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
					SeccompProfile *struct {
						// LocalhostProfile localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
						LocalhostProfile *string `json:"localhostProfile,omitempty"`

						// Type type indicates which kind of seccomp profile will be applied. Valid options are:
						//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
						Type string `json:"type"`
					} `json:"seccompProfile,omitempty"`

					// SupplementalGroups A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
					SupplementalGroups *[]int64 `json:"supplementalGroups,omitempty"`

					// Sysctls Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
					Sysctls *[]struct {
						// Name Name of a property to set
						Name string `json:"name"`

						// Value Value of a property to set
						Value string `json:"value"`
					} `json:"sysctls,omitempty"`

					// WindowsOptions The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
					WindowsOptions *struct {
						// GmsaCredentialSpec GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
						GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

						// GmsaCredentialSpecName GMSACredentialSpecName is the name of the GMSA credential spec to use.
						GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

						// HostProcess HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
						HostProcess *bool `json:"hostProcess,omitempty"`

						// RunAsUserName The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
						RunAsUserName *string `json:"runAsUserName,omitempty"`
					} `json:"windowsOptions,omitempty"`
				} `json:"podSecurityContext,omitempty"`
				PriorityClassName *string `json:"priorityClassName,omitempty"`

				// Resources ResourceRequirements describes the compute resource requirements.
				Resources *struct {
					// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
					//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
					//  This field is immutable. It can only be set for containers.
					Claims *[]struct {
						// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
						Name string `json:"name"`
					} `json:"claims,omitempty"`

					// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
					Limits *map[string]interface{} `json:"limits,omitempty"`

					// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
					Requests *map[string]interface{} `json:"requests,omitempty"`
				} `json:"resources,omitempty"`
				RuntimeClassName *string `json:"runtimeClassName,omitempty"`
				SchedulerName    *string `json:"schedulerName,omitempty"`

				// StorageProvider BackupStorageProviderSpec represents set of settings to configure cloud provider.
				StorageProvider *struct {
					Bucket *string `json:"bucket,omitempty"`

					// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
					ContainerName     *string `json:"containerName,omitempty"`
					CredentialsSecret string  `json:"credentialsSecret"`
					EndpointUrl       *string `json:"endpointUrl,omitempty"`
					Prefix            *string `json:"prefix,omitempty"`
					Region            *string `json:"region,omitempty"`

					// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
					StorageClass *string `json:"storageClass,omitempty"`
				} `json:"storageProvider,omitempty"`
				Tolerations *[]struct {
					// Effect Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
					Effect *string `json:"effect,omitempty"`

					// Key Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
					Key *string `json:"key,omitempty"`

					// Operator Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
					Operator *string `json:"operator,omitempty"`

					// TolerationSeconds TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
					TolerationSeconds *int64 `json:"tolerationSeconds,omitempty"`

					// Value Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
					Value *string `json:"value,omitempty"`
				} `json:"tolerations,omitempty"`

				// Type BackupStorageType represents backup storage type.
				Type      string `json:"type"`
				VerifyTLS *bool  `json:"verifyTLS,omitempty"`

				// VolumeSpec VolumeSpec represents a specification to configure volume for underlying database.
				VolumeSpec *struct {
					// EmptyDir EmptyDir to use as data volume for mysql. EmptyDir represents a temporary directory that shares a pod's lifetime.
					EmptyDir *map[string]interface{} `json:"emptyDir,omitempty"`

					// HostPath HostPath to use as data volume for mysql. HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.
					HostPath *struct {
						// Path path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
						Path string `json:"path"`

						// Type type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
						Type *string `json:"type,omitempty"`
					} `json:"hostPath,omitempty"`

					// PersistentVolumeClaim PersistentVolumeClaim to specify PVC spec for the volume for mysql data. It has the highest level of precedence, followed by HostPath and EmptyDir. And represents the PVC specification.
					PersistentVolumeClaim *struct {
						// AccessModes accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
						AccessModes *[]string `json:"accessModes,omitempty"`

						// DataSource dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
						DataSource *struct {
							// ApiGroup APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
							ApiGroup *string `json:"apiGroup,omitempty"`

							// Kind Kind is the type of resource being referenced
							Kind string `json:"kind"`

							// Name Name is the name of resource being referenced
							Name string `json:"name"`
						} `json:"dataSource,omitempty"`

						// DataSourceRef dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
						DataSourceRef *struct {
							// ApiGroup APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
							ApiGroup *string `json:"apiGroup,omitempty"`

							// Kind Kind is the type of resource being referenced
							Kind string `json:"kind"`

							// Name Name is the name of resource being referenced
							Name string `json:"name"`

							// Namespace Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
							Namespace *string `json:"namespace,omitempty"`
						} `json:"dataSourceRef,omitempty"`

						// Resources resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
						Resources *struct {
							// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
							//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
							//  This field is immutable. It can only be set for containers.
							Claims *[]struct {
								// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
								Name string `json:"name"`
							} `json:"claims,omitempty"`

							// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
							Limits *map[string]interface{} `json:"limits,omitempty"`

							// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
							Requests *map[string]interface{} `json:"requests,omitempty"`
						} `json:"resources,omitempty"`

						// Selector selector is a label query over volumes to consider for binding.
						Selector *struct {
							// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
							MatchExpressions *[]struct {
								// Key key is the label key that the selector applies to.
								Key string `json:"key"`

								// Operator operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
								Operator string `json:"operator"`

								// Values values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
								Values *[]string `json:"values,omitempty"`
							} `json:"matchExpressions,omitempty"`

							// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
							MatchLabels *map[string]string `json:"matchLabels,omitempty"`
						} `json:"selector,omitempty"`

						// StorageClassName storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
						StorageClassName *string `json:"storageClassName,omitempty"`

						// VolumeMode volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
						VolumeMode *string `json:"volumeMode,omitempty"`

						// VolumeName volumeName is the binding reference to the PersistentVolume backing this claim.
						VolumeName *string `json:"volumeName,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"volumeSpec,omitempty"`
			} `json:"storages,omitempty"`
		} `json:"backup,omitempty"`

		// ClusterSize ClusterSize is amount of nodes that required for the cluster. A database starts in cluster mode if clusterSize >= 3.
		ClusterSize int32 `json:"clusterSize"`

		// DatabaseConfig DatabaseConfig contains a config settings for the specified database.
		DatabaseConfig string `json:"databaseConfig"`

		// DatabaseImage DatabaseVersion sets from version service and uses the recommended version by default.
		DatabaseImage string `json:"databaseImage"`

		// DatabaseType Database type stands for supported databases by the PMM API Now it's pxc or psmdb types but we can extend it.
		DatabaseType string `json:"databaseType"`

		// DbInstance DBInstance represents resource requests for a database cluster.
		DbInstance struct {
			Cpu              *DatabaseCluster_Spec_DbInstance_Cpu      `json:"cpu,omitempty"`
			DiskSize         *DatabaseCluster_Spec_DbInstance_DiskSize `json:"diskSize,omitempty"`
			Memory           *DatabaseCluster_Spec_DbInstance_Memory   `json:"memory,omitempty"`
			StorageClassName *string                                   `json:"storageClassName,omitempty"`
		} `json:"dbInstance"`

		// LoadBalancer LoadBalancer contains a load balancer settings. For PXC it's haproxy or proxysql. For PSMDB it's mongos.
		LoadBalancer *struct {
			Annotations   *map[string]string `json:"annotations,omitempty"`
			Configuration *string            `json:"configuration,omitempty"`

			// ExposeType Service Type string describes ingress methods for a service
			ExposeType               *string   `json:"exposeType,omitempty"`
			Image                    *string   `json:"image,omitempty"`
			LoadBalancerSourceRanges *[]string `json:"loadBalancerSourceRanges,omitempty"`

			// Resources ResourceRequirements describes the compute resource requirements.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
				//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
				//  This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
					Name string `json:"name"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
			Size *int32 `json:"size,omitempty"`

			// TrafficPolicy ServiceExternalTrafficPolicyType describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
			TrafficPolicy *string `json:"trafficPolicy,omitempty"`

			// Type LoadBalancerType contains supported loadbalancers. It can be proxysql or haproxy for PXC clusters, mongos for PSMDB clusters or pgbouncer for Postgresql clusters.
			Type *string `json:"type,omitempty"`
		} `json:"loadBalancer,omitempty"`

		// Monitoring Monitoring contains a monitoring settings.
		Monitoring *struct {
			// ContainerSecurityContext SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
			ContainerSecurityContext *struct {
				// AllowPrivilegeEscalation AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
				AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

				// Capabilities The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
				Capabilities *struct {
					// Add Added capabilities
					Add *[]string `json:"add,omitempty"`

					// Drop Removed capabilities
					Drop *[]string `json:"drop,omitempty"`
				} `json:"capabilities,omitempty"`

				// Privileged Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
				Privileged *bool `json:"privileged,omitempty"`

				// ProcMount procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
				ProcMount *string `json:"procMount,omitempty"`

				// ReadOnlyRootFilesystem Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
				ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

				// RunAsGroup The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
				RunAsGroup *int64 `json:"runAsGroup,omitempty"`

				// RunAsNonRoot Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
				RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

				// RunAsUser The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
				RunAsUser *int64 `json:"runAsUser,omitempty"`

				// SeLinuxOptions The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
				SeLinuxOptions *struct {
					// Level Level is SELinux level label that applies to the container.
					Level *string `json:"level,omitempty"`

					// Role Role is a SELinux role label that applies to the container.
					Role *string `json:"role,omitempty"`

					// Type Type is a SELinux type label that applies to the container.
					Type *string `json:"type,omitempty"`

					// User User is a SELinux user label that applies to the container.
					User *string `json:"user,omitempty"`
				} `json:"seLinuxOptions,omitempty"`

				// SeccompProfile The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
				SeccompProfile *struct {
					// LocalhostProfile localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
					LocalhostProfile *string `json:"localhostProfile,omitempty"`

					// Type type indicates which kind of seccomp profile will be applied. Valid options are:
					//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
					Type string `json:"type"`
				} `json:"seccompProfile,omitempty"`

				// WindowsOptions The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
				WindowsOptions *struct {
					// GmsaCredentialSpec GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
					GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

					// GmsaCredentialSpecName GMSACredentialSpecName is the name of the GMSA credential spec to use.
					GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

					// HostProcess HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
					HostProcess *bool `json:"hostProcess,omitempty"`

					// RunAsUserName The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
					RunAsUserName *string `json:"runAsUserName,omitempty"`
				} `json:"windowsOptions,omitempty"`
			} `json:"containerSecurityContext,omitempty"`

			// ImagePullPolicy PullPolicy describes a policy for if/when to pull a container image
			ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`

			// Pmm PMMSpec contains PMM settings.
			Pmm *struct {
				Image         *string `json:"image,omitempty"`
				Login         *string `json:"login,omitempty"`
				Password      *string `json:"password,omitempty"`
				PublicAddress *string `json:"publicAddress,omitempty"`
				ServerHost    *string `json:"serverHost,omitempty"`
				ServerUser    *string `json:"serverUser,omitempty"`
			} `json:"pmm,omitempty"`

			// Resources ResourceRequirements describes the compute resource requirements.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
				//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
				//  This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
					Name string `json:"name"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
			RuntimeClassName *string `json:"runtimeClassName,omitempty"`
		} `json:"monitoring,omitempty"`

		// Pause Pause represents is a cluster paused or not.
		Pause *bool `json:"pause,omitempty"`

		// SecretsName SecretsName contains name of a secrets file for a database cluster.
		SecretsName *string `json:"secretsName,omitempty"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterStatus defines the observed state of Database.
	Status *struct {
		Host    *string `json:"host,omitempty"`
		Message *string `json:"message,omitempty"`
		Ready   *int32  `json:"ready,omitempty"`
		Size    *int32  `json:"size,omitempty"`

		// Status AppState is used to represent cluster's state.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterSpecDbInstanceCpu0 defines model for .
type DatabaseClusterSpecDbInstanceCpu0 = int

// DatabaseClusterSpecDbInstanceCpu1 defines model for .
type DatabaseClusterSpecDbInstanceCpu1 = string

// DatabaseCluster_Spec_DbInstance_Cpu defines model for DatabaseCluster.Spec.DbInstance.Cpu.
type DatabaseCluster_Spec_DbInstance_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecDbInstanceDiskSize0 defines model for .
type DatabaseClusterSpecDbInstanceDiskSize0 = int

// DatabaseClusterSpecDbInstanceDiskSize1 defines model for .
type DatabaseClusterSpecDbInstanceDiskSize1 = string

// DatabaseCluster_Spec_DbInstance_DiskSize defines model for DatabaseCluster.Spec.DbInstance.DiskSize.
type DatabaseCluster_Spec_DbInstance_DiskSize struct {
	union json.RawMessage
}

// DatabaseClusterSpecDbInstanceMemory0 defines model for .
type DatabaseClusterSpecDbInstanceMemory0 = int

// DatabaseClusterSpecDbInstanceMemory1 defines model for .
type DatabaseClusterSpecDbInstanceMemory1 = string

// DatabaseCluster_Spec_DbInstance_Memory defines model for DatabaseCluster.Spec.DbInstance.Memory.
type DatabaseCluster_Spec_DbInstance_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecLoadBalancerResourcesLimits0 defines model for .
type DatabaseClusterSpecLoadBalancerResourcesLimits0 = int

// DatabaseClusterSpecLoadBalancerResourcesLimits1 defines model for .
type DatabaseClusterSpecLoadBalancerResourcesLimits1 = string

// DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties defines model for DatabaseCluster.Spec.LoadBalancer.Resources.Limits.AdditionalProperties.
type DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecLoadBalancerResourcesRequests0 defines model for .
type DatabaseClusterSpecLoadBalancerResourcesRequests0 = int

// DatabaseClusterSpecLoadBalancerResourcesRequests1 defines model for .
type DatabaseClusterSpecLoadBalancerResourcesRequests1 = string

// DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties defines model for DatabaseCluster.Spec.LoadBalancer.Resources.Requests.AdditionalProperties.
type DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesLimits0 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits0 = int

// DatabaseClusterSpecMonitoringResourcesLimits1 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Limits.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesRequests0 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests0 = int

// DatabaseClusterSpecMonitoringResourcesRequests1 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Requests.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterList DatabaseClusterList is an object that contains the list of the existing database clusters.
type DatabaseClusterList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Items DatabaseCluster is the Schema for the databases API.
	Items *DatabaseCluster `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterRestore DatabaseClusterRestore is the Schema for the databaseclusterrestores API.
type DatabaseClusterRestore struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
	Spec *struct {
		BackupName *string `json:"backupName,omitempty"`

		// BackupSource BackupSource represents settings of a source where to get a backup to run restoration.
		BackupSource *struct {
			// Azure BackupStorageProviderSpec represents set of settings to configure cloud provider.
			Azure *struct {
				Bucket *string `json:"bucket,omitempty"`

				// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
				ContainerName     *string `json:"containerName,omitempty"`
				CredentialsSecret string  `json:"credentialsSecret"`
				EndpointUrl       *string `json:"endpointUrl,omitempty"`
				Prefix            *string `json:"prefix,omitempty"`
				Region            *string `json:"region,omitempty"`

				// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
				StorageClass *string `json:"storageClass,omitempty"`
			} `json:"azure,omitempty"`
			Destination *string `json:"destination,omitempty"`
			Image       *string `json:"image,omitempty"`

			// S3 BackupStorageProviderSpec represents set of settings to configure cloud provider.
			S3 *struct {
				Bucket *string `json:"bucket,omitempty"`

				// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
				ContainerName     *string `json:"containerName,omitempty"`
				CredentialsSecret string  `json:"credentialsSecret"`
				EndpointUrl       *string `json:"endpointUrl,omitempty"`
				Prefix            *string `json:"prefix,omitempty"`
				Region            *string `json:"region,omitempty"`

				// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
				StorageClass *string `json:"storageClass,omitempty"`
			} `json:"s3,omitempty"`
			SslInternalSecretName *string `json:"sslInternalSecretName,omitempty"`
			SslSecretName         *string `json:"sslSecretName,omitempty"`
			StorageName           *string `json:"storageName,omitempty"`

			// StorageType BackupStorageType represents backup storage type.
			StorageType     string  `json:"storage_type"`
			VaultSecretName *string `json:"vaultSecretName,omitempty"`
		} `json:"backupSource,omitempty"`
		DatabaseCluster string `json:"databaseCluster"`

		// DatabaseType EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		DatabaseType string `json:"databaseType"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
	Status *struct {
		Completed  *time.Time `json:"completed,omitempty"`
		Conditions *[]struct {
			// LastTransitionTime lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
			LastTransitionTime time.Time `json:"lastTransitionTime"`

			// Message message is a human readable message indicating details about the transition. This may be an empty string.
			Message string `json:"message"`

			// ObservedGeneration observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
			ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

			// Reason reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
			Reason string `json:"reason"`

			// Status status of the condition, one of True, False, Unknown.
			Status DatabaseClusterRestoreStatusConditionsStatus `json:"status"`

			// Type type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
			Type string `json:"type"`
		} `json:"conditions,omitempty"`
		Destination   *string    `json:"destination,omitempty"`
		Lastscheduled *time.Time `json:"lastscheduled,omitempty"`
		Message       *string    `json:"message,omitempty"`

		// State RestoreState represents state of restoration.
		State       *string `json:"state,omitempty"`
		StorageName *string `json:"storageName,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterRestoreStatusConditionsStatus status of the condition, one of True, False, Unknown.
type DatabaseClusterRestoreStatusConditionsStatus string

// DatabaseClusterRestoreList DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores.
type DatabaseClusterRestoreList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Items DatabaseClusterRestore is the Schema for the databaseclusterrestores API.
	Items *DatabaseClusterRestore `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseEngine DatabaseEngine is the Schema for the databaseengines API.
type DatabaseEngine struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseEngineSpec is a spec for a database engine.
	Spec *struct {
		AllowedVersions *[]string `json:"allowedVersions,omitempty"`

		// Type EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		Type string `json:"type"`
	} `json:"spec,omitempty"`

	// Status DatabaseEngineStatus defines the observed state of DatabaseEngine.
	Status *struct {
		// AvailableVersions Versions struct represents available versions of database engine components.
		AvailableVersions *struct {
			Backup *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"backup,omitempty"`
			Engine *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"engine,omitempty"`
			Proxy *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"proxy,omitempty"`
			Tools *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"tools,omitempty"`
		} `json:"availableVersions,omitempty"`
		OperatorVersion *string `json:"operatorVersion,omitempty"`

		// Status EngineState represents state of engine in a k8s cluster.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseEngineList DatabaseEngineList is an object that contains the list of the existing database engines.
type DatabaseEngineList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Items DatabaseEngine is the Schema for the databaseengines API.
	Items *DatabaseEngine `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Error Error response
type Error struct {
	Message *string `json:"message,omitempty"`
}

// KubernetesCluster kubernetes object
type KubernetesCluster struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// KubernetesClusterList defines model for KubernetesClusterList.
type KubernetesClusterList = []KubernetesCluster

// PMMInstance PMM instance information
type PMMInstance struct {
	ApiKeySecretId string  `json:"apiKeySecretId"`
	Id             *string `json:"id,omitempty"`
	Url            string  `json:"url"`
}

// PMMInstanceCreateParams PMM instance create information
type PMMInstanceCreateParams struct {
	ApiKey string `json:"apiKey"`
	Url    string `json:"url"`
}

// PMMInstanceUpdateParams PMM instance update information
type PMMInstanceUpdateParams struct {
	ApiKey *string `json:"apiKey,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// PMMInstancesList defines model for PMMInstancesList.
type PMMInstancesList = []PMMInstance

// UpdateBackupStorageParams Backup storage parameters
type UpdateBackupStorageParams struct {
	AccessKey *string `json:"accessKey,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName *string `json:"bucketName,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      *string `json:"name,omitempty"`
	Region    *string `json:"region,omitempty"`
	SecretKey *string `json:"secretKey,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type IoK8sApimachineryPkgApisMetaV1ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`

	// ResourceVersion String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`

	// SelfLink selfLink is a URL representing this object. Populated by the system. Read-only.
	//
	// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
	SelfLink *string `json:"selfLink,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusCause StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type IoK8sApimachineryPkgApisMetaV1StatusCause struct {
	// Field The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `json:"field,omitempty"`

	// Message A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `json:"reason,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 struct {
	// Causes The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes *[]IoK8sApimachineryPkgApisMetaV1StatusCause `json:"causes,omitempty"`

	// Group The group attribute of the resource associated with the status StatusReason.
	Group *string `json:"group,omitempty"`

	// Kind The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Name The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `json:"name,omitempty"`

	// RetryAfterSeconds If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int32 `json:"retryAfterSeconds,omitempty"`

	// Uid UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `json:"uid,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusV2 Status is a return value for calls that don't return other objects.
type IoK8sApimachineryPkgApisMetaV1StatusV2 struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Code Suggested HTTP return code for this status, 0 if not set.
	Code *int32 `json:"code,omitempty"`

	// Details StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
	Details *IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 `json:"details,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// CreateBackupStorageJSONRequestBody defines body for CreateBackupStorage for application/json ContentType.
type CreateBackupStorageJSONRequestBody = CreateBackupStorageParams

// UpdateBackupStorageJSONRequestBody defines body for UpdateBackupStorage for application/json ContentType.
type UpdateBackupStorageJSONRequestBody = UpdateBackupStorageParams

// RegisterKubernetesClusterJSONRequestBody defines body for RegisterKubernetesCluster for application/json ContentType.
type RegisterKubernetesClusterJSONRequestBody = CreateKubernetesClusterParams

// CreateDatabaseClusterRestoreJSONRequestBody defines body for CreateDatabaseClusterRestore for application/json ContentType.
type CreateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// UpdateDatabaseClusterRestoreJSONRequestBody defines body for UpdateDatabaseClusterRestore for application/json ContentType.
type UpdateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// CreateDatabaseClusterJSONRequestBody defines body for CreateDatabaseCluster for application/json ContentType.
type CreateDatabaseClusterJSONRequestBody = DatabaseCluster

// UpdateDatabaseClusterJSONRequestBody defines body for UpdateDatabaseCluster for application/json ContentType.
type UpdateDatabaseClusterJSONRequestBody = DatabaseCluster

// UpdateDatabaseEngineJSONRequestBody defines body for UpdateDatabaseEngine for application/json ContentType.
type UpdateDatabaseEngineJSONRequestBody = DatabaseEngine

// CreatePMMInstanceJSONRequestBody defines body for CreatePMMInstance for application/json ContentType.
type CreatePMMInstanceJSONRequestBody = PMMInstanceCreateParams

// UpdatePMMInstanceJSONRequestBody defines body for UpdatePMMInstance for application/json ContentType.
type UpdatePMMInstanceJSONRequestBody = PMMInstanceUpdateParams

// AsDatabaseClusterSpecDbInstanceCpu0 returns the union data inside the DatabaseCluster_Spec_DbInstance_Cpu as a DatabaseClusterSpecDbInstanceCpu0
func (t DatabaseCluster_Spec_DbInstance_Cpu) AsDatabaseClusterSpecDbInstanceCpu0() (DatabaseClusterSpecDbInstanceCpu0, error) {
	var body DatabaseClusterSpecDbInstanceCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecDbInstanceCpu0 overwrites any union data inside the DatabaseCluster_Spec_DbInstance_Cpu as the provided DatabaseClusterSpecDbInstanceCpu0
func (t *DatabaseCluster_Spec_DbInstance_Cpu) FromDatabaseClusterSpecDbInstanceCpu0(v DatabaseClusterSpecDbInstanceCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecDbInstanceCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_DbInstance_Cpu, using the provided DatabaseClusterSpecDbInstanceCpu0
func (t *DatabaseCluster_Spec_DbInstance_Cpu) MergeDatabaseClusterSpecDbInstanceCpu0(v DatabaseClusterSpecDbInstanceCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecDbInstanceCpu1 returns the union data inside the DatabaseCluster_Spec_DbInstance_Cpu as a DatabaseClusterSpecDbInstanceCpu1
func (t DatabaseCluster_Spec_DbInstance_Cpu) AsDatabaseClusterSpecDbInstanceCpu1() (DatabaseClusterSpecDbInstanceCpu1, error) {
	var body DatabaseClusterSpecDbInstanceCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecDbInstanceCpu1 overwrites any union data inside the DatabaseCluster_Spec_DbInstance_Cpu as the provided DatabaseClusterSpecDbInstanceCpu1
func (t *DatabaseCluster_Spec_DbInstance_Cpu) FromDatabaseClusterSpecDbInstanceCpu1(v DatabaseClusterSpecDbInstanceCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecDbInstanceCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_DbInstance_Cpu, using the provided DatabaseClusterSpecDbInstanceCpu1
func (t *DatabaseCluster_Spec_DbInstance_Cpu) MergeDatabaseClusterSpecDbInstanceCpu1(v DatabaseClusterSpecDbInstanceCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_DbInstance_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_DbInstance_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecDbInstanceDiskSize0 returns the union data inside the DatabaseCluster_Spec_DbInstance_DiskSize as a DatabaseClusterSpecDbInstanceDiskSize0
func (t DatabaseCluster_Spec_DbInstance_DiskSize) AsDatabaseClusterSpecDbInstanceDiskSize0() (DatabaseClusterSpecDbInstanceDiskSize0, error) {
	var body DatabaseClusterSpecDbInstanceDiskSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecDbInstanceDiskSize0 overwrites any union data inside the DatabaseCluster_Spec_DbInstance_DiskSize as the provided DatabaseClusterSpecDbInstanceDiskSize0
func (t *DatabaseCluster_Spec_DbInstance_DiskSize) FromDatabaseClusterSpecDbInstanceDiskSize0(v DatabaseClusterSpecDbInstanceDiskSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecDbInstanceDiskSize0 performs a merge with any union data inside the DatabaseCluster_Spec_DbInstance_DiskSize, using the provided DatabaseClusterSpecDbInstanceDiskSize0
func (t *DatabaseCluster_Spec_DbInstance_DiskSize) MergeDatabaseClusterSpecDbInstanceDiskSize0(v DatabaseClusterSpecDbInstanceDiskSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecDbInstanceDiskSize1 returns the union data inside the DatabaseCluster_Spec_DbInstance_DiskSize as a DatabaseClusterSpecDbInstanceDiskSize1
func (t DatabaseCluster_Spec_DbInstance_DiskSize) AsDatabaseClusterSpecDbInstanceDiskSize1() (DatabaseClusterSpecDbInstanceDiskSize1, error) {
	var body DatabaseClusterSpecDbInstanceDiskSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecDbInstanceDiskSize1 overwrites any union data inside the DatabaseCluster_Spec_DbInstance_DiskSize as the provided DatabaseClusterSpecDbInstanceDiskSize1
func (t *DatabaseCluster_Spec_DbInstance_DiskSize) FromDatabaseClusterSpecDbInstanceDiskSize1(v DatabaseClusterSpecDbInstanceDiskSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecDbInstanceDiskSize1 performs a merge with any union data inside the DatabaseCluster_Spec_DbInstance_DiskSize, using the provided DatabaseClusterSpecDbInstanceDiskSize1
func (t *DatabaseCluster_Spec_DbInstance_DiskSize) MergeDatabaseClusterSpecDbInstanceDiskSize1(v DatabaseClusterSpecDbInstanceDiskSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_DbInstance_DiskSize) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_DbInstance_DiskSize) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecDbInstanceMemory0 returns the union data inside the DatabaseCluster_Spec_DbInstance_Memory as a DatabaseClusterSpecDbInstanceMemory0
func (t DatabaseCluster_Spec_DbInstance_Memory) AsDatabaseClusterSpecDbInstanceMemory0() (DatabaseClusterSpecDbInstanceMemory0, error) {
	var body DatabaseClusterSpecDbInstanceMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecDbInstanceMemory0 overwrites any union data inside the DatabaseCluster_Spec_DbInstance_Memory as the provided DatabaseClusterSpecDbInstanceMemory0
func (t *DatabaseCluster_Spec_DbInstance_Memory) FromDatabaseClusterSpecDbInstanceMemory0(v DatabaseClusterSpecDbInstanceMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecDbInstanceMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_DbInstance_Memory, using the provided DatabaseClusterSpecDbInstanceMemory0
func (t *DatabaseCluster_Spec_DbInstance_Memory) MergeDatabaseClusterSpecDbInstanceMemory0(v DatabaseClusterSpecDbInstanceMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecDbInstanceMemory1 returns the union data inside the DatabaseCluster_Spec_DbInstance_Memory as a DatabaseClusterSpecDbInstanceMemory1
func (t DatabaseCluster_Spec_DbInstance_Memory) AsDatabaseClusterSpecDbInstanceMemory1() (DatabaseClusterSpecDbInstanceMemory1, error) {
	var body DatabaseClusterSpecDbInstanceMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecDbInstanceMemory1 overwrites any union data inside the DatabaseCluster_Spec_DbInstance_Memory as the provided DatabaseClusterSpecDbInstanceMemory1
func (t *DatabaseCluster_Spec_DbInstance_Memory) FromDatabaseClusterSpecDbInstanceMemory1(v DatabaseClusterSpecDbInstanceMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecDbInstanceMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_DbInstance_Memory, using the provided DatabaseClusterSpecDbInstanceMemory1
func (t *DatabaseCluster_Spec_DbInstance_Memory) MergeDatabaseClusterSpecDbInstanceMemory1(v DatabaseClusterSpecDbInstanceMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_DbInstance_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_DbInstance_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecLoadBalancerResourcesLimits0 returns the union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecLoadBalancerResourcesLimits0
func (t DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecLoadBalancerResourcesLimits0() (DatabaseClusterSpecLoadBalancerResourcesLimits0, error) {
	var body DatabaseClusterSpecLoadBalancerResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecLoadBalancerResourcesLimits0 overwrites any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecLoadBalancerResourcesLimits0
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecLoadBalancerResourcesLimits0(v DatabaseClusterSpecLoadBalancerResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecLoadBalancerResourcesLimits0 performs a merge with any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecLoadBalancerResourcesLimits0
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecLoadBalancerResourcesLimits0(v DatabaseClusterSpecLoadBalancerResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecLoadBalancerResourcesLimits1 returns the union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecLoadBalancerResourcesLimits1
func (t DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecLoadBalancerResourcesLimits1() (DatabaseClusterSpecLoadBalancerResourcesLimits1, error) {
	var body DatabaseClusterSpecLoadBalancerResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecLoadBalancerResourcesLimits1 overwrites any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecLoadBalancerResourcesLimits1
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecLoadBalancerResourcesLimits1(v DatabaseClusterSpecLoadBalancerResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecLoadBalancerResourcesLimits1 performs a merge with any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecLoadBalancerResourcesLimits1
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecLoadBalancerResourcesLimits1(v DatabaseClusterSpecLoadBalancerResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecLoadBalancerResourcesRequests0 returns the union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecLoadBalancerResourcesRequests0
func (t DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecLoadBalancerResourcesRequests0() (DatabaseClusterSpecLoadBalancerResourcesRequests0, error) {
	var body DatabaseClusterSpecLoadBalancerResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecLoadBalancerResourcesRequests0 overwrites any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecLoadBalancerResourcesRequests0
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecLoadBalancerResourcesRequests0(v DatabaseClusterSpecLoadBalancerResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecLoadBalancerResourcesRequests0 performs a merge with any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecLoadBalancerResourcesRequests0
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecLoadBalancerResourcesRequests0(v DatabaseClusterSpecLoadBalancerResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecLoadBalancerResourcesRequests1 returns the union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecLoadBalancerResourcesRequests1
func (t DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecLoadBalancerResourcesRequests1() (DatabaseClusterSpecLoadBalancerResourcesRequests1, error) {
	var body DatabaseClusterSpecLoadBalancerResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecLoadBalancerResourcesRequests1 overwrites any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecLoadBalancerResourcesRequests1
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecLoadBalancerResourcesRequests1(v DatabaseClusterSpecLoadBalancerResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecLoadBalancerResourcesRequests1 performs a merge with any union data inside the DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecLoadBalancerResourcesRequests1
func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecLoadBalancerResourcesRequests1(v DatabaseClusterSpecLoadBalancerResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_LoadBalancer_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits0
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits0() (DatabaseClusterSpecMonitoringResourcesLimits0, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits1
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits1() (DatabaseClusterSpecMonitoringResourcesLimits1, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests0
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests0() (DatabaseClusterSpecMonitoringResourcesRequests0, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests1
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests1() (DatabaseClusterSpecMonitoringResourcesRequests1, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of the created backup storages
	// (GET /backup-storages)
	ListBackupStorages(ctx echo.Context) error
	// Create a new backup storage object
	// (POST /backup-storages)
	CreateBackupStorage(ctx echo.Context) error
	// Delete the specified backup storage
	// (DELETE /backup-storages/{backup-storage-id})
	DeleteBackupStorage(ctx echo.Context, backupStorageId string) error
	// Get the specified backup storage
	// (GET /backup-storages/{backup-storage-id})
	GetBackupStorage(ctx echo.Context, backupStorageId string) error
	// Partial update of the specified backup storage
	// (PATCH /backup-storages/{backup-storage-id})
	UpdateBackupStorage(ctx echo.Context, backupStorageId string) error
	// List of the registered kubernetes clusters
	// (GET /kubernetes)
	ListKubernetesClusters(ctx echo.Context) error
	// Register kubernetes cluster in Everest
	// (POST /kubernetes)
	RegisterKubernetesCluster(ctx echo.Context) error
	// Get the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id})
	GetKubernetesCluster(ctx echo.Context, kubernetesId string) error
	// List of the created database cluster restores on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-cluster-restores)
	ListDatabaseClusterRestores(ctx echo.Context, kubernetesId string) error
	// Create a database cluster restore on the specified kubernetes cluster
	// (POST /kubernetes/{kubernetes-id}/database-cluster-restores)
	CreateDatabaseClusterRestore(ctx echo.Context, kubernetesId string) error
	// Delete the specified cluster restore on the specified kubernetes cluster
	// (DELETE /kubernetes/{kubernetes-id}/database-cluster-restores/{name})
	DeleteDatabaseClusterRestore(ctx echo.Context, kubernetesId string, name string) error
	// Returns the specified cluster restore on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-cluster-restores/{name})
	GetDatabaseClusterRestore(ctx echo.Context, kubernetesId string, name string) error
	// Replace the specified cluster restore on the specified kubernetes cluster
	// (PUT /kubernetes/{kubernetes-id}/database-cluster-restores/{name})
	UpdateDatabaseClusterRestore(ctx echo.Context, kubernetesId string, name string) error
	// List of the created database clusters on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-clusters)
	ListDatabaseClusters(ctx echo.Context, kubernetesId string) error
	// Create a database cluster on the specified kubernetes cluster
	// (POST /kubernetes/{kubernetes-id}/database-clusters)
	CreateDatabaseCluster(ctx echo.Context, kubernetesId string) error
	// Delete the specified database cluster on the specified kubernetes cluster
	// (DELETE /kubernetes/{kubernetes-id}/database-clusters/{name})
	DeleteDatabaseCluster(ctx echo.Context, kubernetesId string, name string) error
	// Get the specified database cluster on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-clusters/{name})
	GetDatabaseCluster(ctx echo.Context, kubernetesId string, name string) error
	// Replace the specified database cluster on the specified kubernetes cluster
	// (PUT /kubernetes/{kubernetes-id}/database-clusters/{name})
	UpdateDatabaseCluster(ctx echo.Context, kubernetesId string, name string) error
	// List of the available database engines on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-engines)
	ListDatabaseEngines(ctx echo.Context, kubernetesId string) error
	// Get the specified database engine on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-engines/{name})
	GetDatabaseEngine(ctx echo.Context, kubernetesId string, name string) error
	// Update the specified database engine on the specified kubernetes cluster
	// (PUT /kubernetes/{kubernetes-id}/database-engines/{name})
	UpdateDatabaseEngine(ctx echo.Context, kubernetesId string, name string) error
	// List of the created PMM instances
	// (GET /pmm-instances)
	ListPMMInstances(ctx echo.Context) error
	// Create a new PMM instance object
	// (POST /pmm-instances)
	CreatePMMInstance(ctx echo.Context) error
	// Delete the specified PMM instance
	// (DELETE /pmm-instances/{pmm-instance-id})
	DeletePMMInstance(ctx echo.Context, pmmInstanceId string) error
	// Get the specified PMM instance
	// (GET /pmm-instances/{pmm-instance-id})
	GetPMMInstance(ctx echo.Context, pmmInstanceId string) error
	// Update the specified PMM instance
	// (PATCH /pmm-instances/{pmm-instance-id})
	UpdatePMMInstance(ctx echo.Context, pmmInstanceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListBackupStorages converts echo context to params.
func (w *ServerInterfaceWrapper) ListBackupStorages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListBackupStorages(ctx)
	return err
}

// CreateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBackupStorage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBackupStorage(ctx)
	return err
}

// DeleteBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "backup-storage-id" -------------
	var backupStorageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "backup-storage-id", runtime.ParamLocationPath, ctx.Param("backup-storage-id"), &backupStorageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter backup-storage-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBackupStorage(ctx, backupStorageId)
	return err
}

// GetBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "backup-storage-id" -------------
	var backupStorageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "backup-storage-id", runtime.ParamLocationPath, ctx.Param("backup-storage-id"), &backupStorageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter backup-storage-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBackupStorage(ctx, backupStorageId)
	return err
}

// UpdateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "backup-storage-id" -------------
	var backupStorageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "backup-storage-id", runtime.ParamLocationPath, ctx.Param("backup-storage-id"), &backupStorageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter backup-storage-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateBackupStorage(ctx, backupStorageId)
	return err
}

// ListKubernetesClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListKubernetesClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListKubernetesClusters(ctx)
	return err
}

// RegisterKubernetesCluster converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterKubernetesCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterKubernetesCluster(ctx)
	return err
}

// GetKubernetesCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetKubernetesCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKubernetesCluster(ctx, kubernetesId)
	return err
}

// ListDatabaseClusterRestores converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusterRestores(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDatabaseClusterRestores(ctx, kubernetesId)
	return err
}

// CreateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatabaseClusterRestore(ctx, kubernetesId)
	return err
}

// DeleteDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDatabaseClusterRestore(ctx, kubernetesId, name)
	return err
}

// GetDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatabaseClusterRestore(ctx, kubernetesId, name)
	return err
}

// UpdateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDatabaseClusterRestore(ctx, kubernetesId, name)
	return err
}

// ListDatabaseClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDatabaseClusters(ctx, kubernetesId)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatabaseCluster(ctx, kubernetesId)
	return err
}

// DeleteDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDatabaseCluster(ctx, kubernetesId, name)
	return err
}

// GetDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatabaseCluster(ctx, kubernetesId, name)
	return err
}

// UpdateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDatabaseCluster(ctx, kubernetesId, name)
	return err
}

// ListDatabaseEngines converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseEngines(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDatabaseEngines(ctx, kubernetesId)
	return err
}

// GetDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatabaseEngine(ctx, kubernetesId, name)
	return err
}

// UpdateDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDatabaseEngine(ctx, kubernetesId, name)
	return err
}

// ListPMMInstances converts echo context to params.
func (w *ServerInterfaceWrapper) ListPMMInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPMMInstances(ctx)
	return err
}

// CreatePMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePMMInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePMMInstance(ctx)
	return err
}

// DeletePMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePMMInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pmm-instance-id" -------------
	var pmmInstanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pmm-instance-id", runtime.ParamLocationPath, ctx.Param("pmm-instance-id"), &pmmInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pmm-instance-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePMMInstance(ctx, pmmInstanceId)
	return err
}

// GetPMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetPMMInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pmm-instance-id" -------------
	var pmmInstanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pmm-instance-id", runtime.ParamLocationPath, ctx.Param("pmm-instance-id"), &pmmInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pmm-instance-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPMMInstance(ctx, pmmInstanceId)
	return err
}

// UpdatePMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePMMInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pmm-instance-id" -------------
	var pmmInstanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pmm-instance-id", runtime.ParamLocationPath, ctx.Param("pmm-instance-id"), &pmmInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pmm-instance-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePMMInstance(ctx, pmmInstanceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/backup-storages", wrapper.ListBackupStorages)
	router.POST(baseURL+"/backup-storages", wrapper.CreateBackupStorage)
	router.DELETE(baseURL+"/backup-storages/:backup-storage-id", wrapper.DeleteBackupStorage)
	router.GET(baseURL+"/backup-storages/:backup-storage-id", wrapper.GetBackupStorage)
	router.PATCH(baseURL+"/backup-storages/:backup-storage-id", wrapper.UpdateBackupStorage)
	router.GET(baseURL+"/kubernetes", wrapper.ListKubernetesClusters)
	router.POST(baseURL+"/kubernetes", wrapper.RegisterKubernetesCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id", wrapper.GetKubernetesCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores", wrapper.ListDatabaseClusterRestores)
	router.POST(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores", wrapper.CreateDatabaseClusterRestore)
	router.DELETE(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores/:name", wrapper.DeleteDatabaseClusterRestore)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores/:name", wrapper.GetDatabaseClusterRestore)
	router.PUT(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores/:name", wrapper.UpdateDatabaseClusterRestore)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-clusters", wrapper.ListDatabaseClusters)
	router.POST(baseURL+"/kubernetes/:kubernetes-id/database-clusters", wrapper.CreateDatabaseCluster)
	router.DELETE(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name", wrapper.DeleteDatabaseCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name", wrapper.GetDatabaseCluster)
	router.PUT(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name", wrapper.UpdateDatabaseCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-engines", wrapper.ListDatabaseEngines)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-engines/:name", wrapper.GetDatabaseEngine)
	router.PUT(baseURL+"/kubernetes/:kubernetes-id/database-engines/:name", wrapper.UpdateDatabaseEngine)
	router.GET(baseURL+"/pmm-instances", wrapper.ListPMMInstances)
	router.POST(baseURL+"/pmm-instances", wrapper.CreatePMMInstance)
	router.DELETE(baseURL+"/pmm-instances/:pmm-instance-id", wrapper.DeletePMMInstance)
	router.GET(baseURL+"/pmm-instances/:pmm-instance-id", wrapper.GetPMMInstance)
	router.PATCH(baseURL+"/pmm-instances/:pmm-instance-id", wrapper.UpdatePMMInstance)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
