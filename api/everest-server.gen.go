// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for BackupStorageType.
const (
	BackupStorageTypeAzure BackupStorageType = "azure"
	BackupStorageTypeS3    BackupStorageType = "s3"
)

// Defines values for CreateBackupStorageParamsType.
const (
	CreateBackupStorageParamsTypeAzure CreateBackupStorageParamsType = "azure"
	CreateBackupStorageParamsTypeS3    CreateBackupStorageParamsType = "s3"
)

// Defines values for DatabaseClusterSpecDataSourcePitrType.
const (
	DatabaseClusterSpecDataSourcePitrTypeDate        DatabaseClusterSpecDataSourcePitrType = "date"
	DatabaseClusterSpecDataSourcePitrTypeLatest      DatabaseClusterSpecDataSourcePitrType = "latest"
	DatabaseClusterSpecDataSourcePitrTypeSkip        DatabaseClusterSpecDataSourcePitrType = "skip"
	DatabaseClusterSpecDataSourcePitrTypeTransaction DatabaseClusterSpecDataSourcePitrType = "transaction"
)

// Defines values for DatabaseClusterSpecEngineType.
const (
	Postgresql DatabaseClusterSpecEngineType = "postgresql"
	Psmdb      DatabaseClusterSpecEngineType = "psmdb"
	Pxc        DatabaseClusterSpecEngineType = "pxc"
)

// Defines values for DatabaseClusterSpecProxyExposeType.
const (
	External DatabaseClusterSpecProxyExposeType = "external"
	Internal DatabaseClusterSpecProxyExposeType = "internal"
)

// Defines values for DatabaseClusterSpecProxyType.
const (
	Haproxy   DatabaseClusterSpecProxyType = "haproxy"
	Mongos    DatabaseClusterSpecProxyType = "mongos"
	Pgbouncer DatabaseClusterSpecProxyType = "pgbouncer"
	Proxysql  DatabaseClusterSpecProxyType = "proxysql"
)

// Defines values for DatabaseClusterRestoreSpecDataSourcePitrType.
const (
	DatabaseClusterRestoreSpecDataSourcePitrTypeDate        DatabaseClusterRestoreSpecDataSourcePitrType = "date"
	DatabaseClusterRestoreSpecDataSourcePitrTypeLatest      DatabaseClusterRestoreSpecDataSourcePitrType = "latest"
	DatabaseClusterRestoreSpecDataSourcePitrTypeSkip        DatabaseClusterRestoreSpecDataSourcePitrType = "skip"
	DatabaseClusterRestoreSpecDataSourcePitrTypeTransaction DatabaseClusterRestoreSpecDataSourcePitrType = "transaction"
)

// Defines values for MonitoringInstanceBaseType.
const (
	MonitoringInstanceBaseTypePmm MonitoringInstanceBaseType = "pmm"
)

// Defines values for MonitoringInstanceBaseWithNameType.
const (
	MonitoringInstanceBaseWithNameTypePmm MonitoringInstanceBaseWithNameType = "pmm"
)

// Defines values for MonitoringInstanceCreateParamsType.
const (
	MonitoringInstanceCreateParamsTypePmm MonitoringInstanceCreateParamsType = "pmm"
)

// Defines values for MonitoringInstanceUpdateParamsType.
const (
	MonitoringInstanceUpdateParamsTypePmm MonitoringInstanceUpdateParamsType = "pmm"
)

// BackupStorage Backup storage information
type BackupStorage struct {
	BucketName  string            `json:"bucketName"`
	Description *string           `json:"description,omitempty"`
	Name        string            `json:"name"`
	Region      string            `json:"region,omitempty"`
	Type        BackupStorageType `json:"type"`
	Url         *string           `json:"url,omitempty"`
}

// BackupStorageType defines model for BackupStorage.Type.
type BackupStorageType string

// BackupStoragesList defines model for BackupStoragesList.
type BackupStoragesList = []BackupStorage

// CreateBackupStorageParams Backup storage parameters
type CreateBackupStorageParams struct {
	AccessKey string `json:"accessKey"`

	// BucketName The cloud storage bucket/container name
	BucketName  string  `json:"bucketName"`
	Description *string `json:"description,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                        `json:"name"`
	Region    string                        `json:"region,omitempty"`
	SecretKey string                        `json:"secretKey"`
	Type      CreateBackupStorageParamsType `json:"type"`
	Url       *string                       `json:"url,omitempty"`
}

// CreateBackupStorageParamsType defines model for CreateBackupStorageParams.Type.
type CreateBackupStorageParamsType string

// DatabaseCluster DatabaseCluster is the Schema for the databaseclusters API.
type DatabaseCluster struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterSpec defines the desired state of DatabaseCluster.
	Spec *struct {
		// AllowUnsafeConfiguration AllowUnsafeConfiguration field used to ensure that the user can create configurations unfit for production use.
		AllowUnsafeConfiguration *bool `json:"allowUnsafeConfiguration,omitempty"`

		// Backup Backup is the backup specification
		Backup *struct {
			// Enabled Enabled is a flag to enable backups
			Enabled bool `json:"enabled"`

			// Pitr PITR is the configuration of the point in time recovery
			Pitr *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage where the PITR is enabled
				BackupStorageName string `json:"backupStorageName"`

				// Enabled Enabled is a flag to enable PITR
				Enabled bool `json:"enabled"`

				// UploadIntervalSec UploadIntervalSec number of seconds between the binlogs uploads
				UploadIntervalSec *int `json:"uploadIntervalSec,omitempty"`
			} `json:"pitr,omitempty"`

			// Schedules Schedules is a list of backup schedules
			Schedules *[]struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage CR that defines the storage location
				BackupStorageName string `json:"backupStorageName"`

				// Enabled Enabled is a flag to enable the schedule
				Enabled bool `json:"enabled"`

				// Name Name is the name of the schedule
				Name string `json:"name"`

				// RetentionCopies RetentionCopies is the number of backup copies to retain
				RetentionCopies *int32 `json:"retentionCopies,omitempty"`

				// Schedule Schedule is the cron schedule
				Schedule string `json:"schedule"`
			} `json:"schedules,omitempty"`
		} `json:"backup,omitempty"`

		// DataSource DataSource defines a data source for bootstraping a new cluster
		DataSource *struct {
			// BackupSource BackupSource is the backup source to restore from
			BackupSource *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
				BackupStorageName string `json:"backupStorageName"`

				// Path Path is the path to the backup file/directory.
				Path string `json:"path"`
			} `json:"backupSource,omitempty"`

			// DbClusterBackupName DBClusterBackupName is the name of the DB cluster backup to restore from
			DbClusterBackupName *string `json:"dbClusterBackupName,omitempty"`

			// Pitr PITR is the point-in-time recovery configuration
			Pitr *struct {
				// Date Date is the date to recover to
				Date *string `json:"date,omitempty"`

				// Type Type is the type of recovery. pxc: full list; psmdb, pg: date,latest
				Type *DatabaseClusterSpecDataSourcePitrType `json:"type,omitempty"`
			} `json:"pitr,omitempty"`
		} `json:"dataSource,omitempty"`

		// Engine Engine is the database engine specification
		Engine struct {
			// Config Config is the engine configuration
			Config *string `json:"config,omitempty"`

			// Replicas Replicas is the number of engine replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each engine replica. If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Engine_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Engine_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Storage Storage is the engine storage configuration
			Storage struct {
				// Class Class is the storage class to use for the persistent volume claim
				Class *string `json:"class,omitempty"`

				// Size Size is the size of the persistent volume claim
				Size DatabaseCluster_Spec_Engine_Storage_Size `json:"size"`
			} `json:"storage"`

			// Type Type is the engine type
			Type DatabaseClusterSpecEngineType `json:"type"`

			// UserSecretsName UserSecretsName is the name of the secret containing the user secrets
			UserSecretsName *string `json:"userSecretsName,omitempty"`

			// Version Version is the engine version
			Version *string `json:"version,omitempty"`
		} `json:"engine"`

		// Monitoring Monitoring is the monitoring configuration
		Monitoring *struct {
			// MonitoringConfigName MonitoringConfigName is the name of a monitoringConfig CR.
			MonitoringConfigName *string `json:"monitoringConfigName,omitempty"`

			// Resources Resources defines resource limitations for the monitoring.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
				//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
				//  This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
					Name string `json:"name"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
		} `json:"monitoring,omitempty"`

		// Paused Paused is a flag to stop the cluster
		Paused *bool `json:"paused,omitempty"`

		// Proxy Proxy is the proxy specification. If not set, an appropriate proxy specification will be applied for the given engine. A common use case for setting this field is to control the external access to the database cluster.
		Proxy *struct {
			// Config Config is the proxy configuration
			Config *string `json:"config,omitempty"`

			// Expose Expose is the proxy expose configuration
			Expose *struct {
				// IpSourceRanges IPSourceRanges is the list of IP source ranges (CIDR notation) to allow access from. If not set, there is no limitations
				IpSourceRanges *[]string `json:"ipSourceRanges,omitempty"`

				// Type Type is the expose type, can be internal or external
				Type *DatabaseClusterSpecProxyExposeType `json:"type,omitempty"`
			} `json:"expose,omitempty"`

			// Replicas Replicas is the number of proxy replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each proxy replica. If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Proxy_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Proxy_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Type Type is the proxy type
			Type *DatabaseClusterSpecProxyType `json:"type,omitempty"`
		} `json:"proxy,omitempty"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterStatus defines the observed state of DatabaseCluster.
	Status *struct {
		// Hostname Hostname is the hostname where the cluster can be reached
		Hostname *string `json:"hostname,omitempty"`

		// Message Message is extra information about the cluster
		Message *string `json:"message,omitempty"`

		// Port Port is the port where the cluster can be reached
		Port *int32 `json:"port,omitempty"`

		// Ready Ready is the number of ready pods
		Ready *int32 `json:"ready,omitempty"`

		// Size Size is the total number of pods
		Size *int32 `json:"size,omitempty"`

		// Status Status is the status of the cluster
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterSpecDataSourcePitrType Type is the type of recovery. pxc: full list; psmdb, pg: date,latest
type DatabaseClusterSpecDataSourcePitrType string

// DatabaseClusterSpecEngineResourcesCpu0 defines model for .
type DatabaseClusterSpecEngineResourcesCpu0 = int

// DatabaseClusterSpecEngineResourcesCpu1 defines model for .
type DatabaseClusterSpecEngineResourcesCpu1 = string

// DatabaseCluster_Spec_Engine_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Engine_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineResourcesMemory0 defines model for .
type DatabaseClusterSpecEngineResourcesMemory0 = int

// DatabaseClusterSpecEngineResourcesMemory1 defines model for .
type DatabaseClusterSpecEngineResourcesMemory1 = string

// DatabaseCluster_Spec_Engine_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Engine_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineStorageSize0 defines model for .
type DatabaseClusterSpecEngineStorageSize0 = int

// DatabaseClusterSpecEngineStorageSize1 defines model for .
type DatabaseClusterSpecEngineStorageSize1 = string

// DatabaseCluster_Spec_Engine_Storage_Size Size is the size of the persistent volume claim
type DatabaseCluster_Spec_Engine_Storage_Size struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineType Type is the engine type
type DatabaseClusterSpecEngineType string

// DatabaseClusterSpecMonitoringResourcesLimits0 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits0 = int

// DatabaseClusterSpecMonitoringResourcesLimits1 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Limits.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesRequests0 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests0 = int

// DatabaseClusterSpecMonitoringResourcesRequests1 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Requests.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyExposeType Type is the expose type, can be internal or external
type DatabaseClusterSpecProxyExposeType string

// DatabaseClusterSpecProxyResourcesCpu0 defines model for .
type DatabaseClusterSpecProxyResourcesCpu0 = int

// DatabaseClusterSpecProxyResourcesCpu1 defines model for .
type DatabaseClusterSpecProxyResourcesCpu1 = string

// DatabaseCluster_Spec_Proxy_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyResourcesMemory0 defines model for .
type DatabaseClusterSpecProxyResourcesMemory0 = int

// DatabaseClusterSpecProxyResourcesMemory1 defines model for .
type DatabaseClusterSpecProxyResourcesMemory1 = string

// DatabaseCluster_Spec_Proxy_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyType Type is the proxy type
type DatabaseClusterSpecProxyType string

// DatabaseClusterBackup DatabaseClusterBackup is the Schema for the databaseclusterbackups API.
type DatabaseClusterBackup struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterBackupSpec defines the desired state of DatabaseClusterBackup.
	Spec *struct {
		// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
		BackupStorageName string `json:"backupStorageName"`

		// DbClusterName DBClusterName is the original database cluster name.
		DbClusterName string `json:"dbClusterName"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterBackupStatus defines the observed state of DatabaseClusterBackup.
	Status *struct {
		// Completed Completed is the time when the job was completed.
		Completed *time.Time `json:"completed,omitempty"`

		// Created Created is the timestamp of the upstream backup's creation.
		Created *time.Time `json:"created,omitempty"`

		// Destination Destination is the full path to the backup.
		Destination *string `json:"destination,omitempty"`

		// State State is the DatabaseBackup state.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterBackupList DatabaseClusterBackupList is an object that contains the list of the existing database cluster backups.
type DatabaseClusterBackupList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                  `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterBackup `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterCredential kubernetes object
type DatabaseClusterCredential struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// DatabaseClusterList DatabaseClusterList is an object that contains the list of the existing database clusters.
type DatabaseClusterList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string            `json:"apiVersion,omitempty"`
	Items      *[]DatabaseCluster `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterRestore DatabaseClusterRestore is the Schema for the databaseclusterrestores API.
type DatabaseClusterRestore struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
	Spec *struct {
		// DataSource DataSource defines a data source for restoration.
		DataSource struct {
			// BackupSource BackupSource is the backup source to restore from
			BackupSource *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
				BackupStorageName string `json:"backupStorageName"`

				// Path Path is the path to the backup file/directory.
				Path string `json:"path"`
			} `json:"backupSource,omitempty"`

			// DbClusterBackupName DBClusterBackupName is the name of the DB cluster backup to restore from
			DbClusterBackupName *string `json:"dbClusterBackupName,omitempty"`

			// Pitr PITR is the point-in-time recovery configuration
			Pitr *struct {
				// Date Date is the date to recover to
				Date *string `json:"date,omitempty"`

				// Type Type is the type of recovery. pxc: full list; psmdb, pg: date,latest
				Type *DatabaseClusterRestoreSpecDataSourcePitrType `json:"type,omitempty"`
			} `json:"pitr,omitempty"`
		} `json:"dataSource"`

		// DbClusterName DBClusterName defines the cluster name to restore.
		DbClusterName string `json:"dbClusterName"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
	Status *struct {
		Completed *time.Time `json:"completed,omitempty"`
		Message   *string    `json:"message,omitempty"`

		// State RestoreState represents state of restoration.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterRestoreSpecDataSourcePitrType Type is the type of recovery. pxc: full list; psmdb, pg: date,latest
type DatabaseClusterRestoreSpecDataSourcePitrType string

// DatabaseClusterRestoreList DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores.
type DatabaseClusterRestoreList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                   `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterRestore `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseEngine DatabaseEngine is the Schema for the databaseengines API.
type DatabaseEngine struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseEngineSpec is a spec for a database engine.
	Spec *struct {
		AllowedVersions *[]string `json:"allowedVersions,omitempty"`

		// Type EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		Type string `json:"type"`
	} `json:"spec,omitempty"`

	// Status DatabaseEngineStatus defines the observed state of DatabaseEngine.
	Status *struct {
		// AvailableVersions Versions struct represents available versions of database engine components.
		AvailableVersions *struct {
			Backup *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"backup,omitempty"`
			Engine *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"engine,omitempty"`
			Proxy *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"proxy,omitempty"`
			Tools *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"tools,omitempty"`
		} `json:"availableVersions,omitempty"`
		OperatorVersion *string `json:"operatorVersion,omitempty"`

		// Status EngineState represents state of engine in a k8s cluster.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseEngineList DatabaseEngineList is an object that contains the list of the existing database engines.
type DatabaseEngineList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string           `json:"apiVersion,omitempty"`
	Items      *[]DatabaseEngine `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Error Error response
type Error struct {
	Message *string `json:"message,omitempty"`
}

// KubernetesClusterInfo kubernetes cluster info
type KubernetesClusterInfo struct {
	ClusterType       string   `json:"clusterType"`
	StorageClassNames []string `json:"storageClassNames"`
}

// KubernetesClusterMonitoring Kubernetes cluster monitoring configuration
type KubernetesClusterMonitoring struct {
	Enable bool `json:"enable"`

	// MonitoringInstanceName Name of the monitoring instance to use for monitoring the Kubernetes cluster
	MonitoringInstanceName string `json:"monitoringInstanceName,omitempty"`
}

// KubernetesClusterResources kubernetes cluster resources
type KubernetesClusterResources struct {
	Available ResourcesAvailable `json:"available"`
	Capacity  ResourcesCapacity  `json:"capacity"`
}

// ResourcesAvailable defines model for .
type ResourcesAvailable struct {
	CpuMillis   *uint64 `json:"cpuMillis,omitempty"`
	DiskSize    *uint64 `json:"diskSize,omitempty"`
	MemoryBytes *uint64 `json:"memoryBytes,omitempty"`
}

// ResourcesCapacity defines model for .
type ResourcesCapacity struct {
	CpuMillis   *uint64 `json:"cpuMillis,omitempty"`
	DiskSize    *uint64 `json:"diskSize,omitempty"`
	MemoryBytes *uint64 `json:"memoryBytes,omitempty"`
}

// MonitoringInstance Monitoring instance information
type MonitoringInstance = MonitoringInstanceBaseWithName

// MonitoringInstanceBase Monitoring instance information
type MonitoringInstanceBase struct {
	Type MonitoringInstanceBaseType `json:"type,omitempty"`
	Url  string                     `json:"url,omitempty"`
}

// MonitoringInstanceBaseType defines model for MonitoringInstanceBase.Type.
type MonitoringInstanceBaseType string

// MonitoringInstanceBaseWithName defines model for MonitoringInstanceBaseWithName.
type MonitoringInstanceBaseWithName struct {
	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name string                             `json:"name,omitempty"`
	Type MonitoringInstanceBaseWithNameType `json:"type,omitempty"`
	Url  string                             `json:"url,omitempty"`
}

// MonitoringInstanceBaseWithNameType defines model for MonitoringInstanceBaseWithName.Type.
type MonitoringInstanceBaseWithNameType string

// MonitoringInstanceCreateParams defines model for MonitoringInstanceCreateParams.
type MonitoringInstanceCreateParams struct {
	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name string                             `json:"name,omitempty"`
	Pmm  *PMMMonitoringInstanceSpec         `json:"pmm,omitempty"`
	Type MonitoringInstanceCreateParamsType `json:"type,omitempty"`
	Url  string                             `json:"url,omitempty"`
}

// PMMMonitoringInstanceSpec defines model for .
type PMMMonitoringInstanceSpec struct {
	ApiKey   string `json:"apiKey,omitempty"`
	Password string `json:"password,omitempty"`
	User     string `json:"user,omitempty"`
}

// MonitoringInstanceCreateParamsType defines model for MonitoringInstanceCreateParams.Type.
type MonitoringInstanceCreateParamsType string

// MonitoringInstancePMM defines model for MonitoringInstancePMM.
type MonitoringInstancePMM struct {
	Pmm *PMMMonitoringInstanceSpec `json:"pmm,omitempty"`
}

// MonitoringInstanceUpdateParams defines model for MonitoringInstanceUpdateParams.
type MonitoringInstanceUpdateParams struct {
	Pmm  *PMMMonitoringInstanceSpec         `json:"pmm,omitempty"`
	Type MonitoringInstanceUpdateParamsType `json:"type,omitempty"`
	Url  string                             `json:"url,omitempty"`
}

// MonitoringInstanceUpdateParamsType defines model for MonitoringInstanceUpdateParams.Type.
type MonitoringInstanceUpdateParamsType string

// MonitoringInstancesList defines model for MonitoringInstancesList.
type MonitoringInstancesList = []MonitoringInstance

// UpdateBackupStorageParams Backup storage parameters
type UpdateBackupStorageParams struct {
	AccessKey *string `json:"accessKey,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName  *string `json:"bucketName,omitempty"`
	Description *string `json:"description,omitempty"`
	Region      *string `json:"region,omitempty"`
	SecretKey   *string `json:"secretKey,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// Version Everest version info
type Version struct {
	FullCommit  string `json:"fullCommit"`
	ProjectName string `json:"projectName"`
	Version     string `json:"version"`
}

// IoK8sApimachineryPkgApisMetaV1ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type IoK8sApimachineryPkgApisMetaV1ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`

	// ResourceVersion String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`

	// SelfLink selfLink is a URL representing this object. Populated by the system. Read-only.
	//
	// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
	SelfLink *string `json:"selfLink,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusCause StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type IoK8sApimachineryPkgApisMetaV1StatusCause struct {
	// Field The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `json:"field,omitempty"`

	// Message A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `json:"reason,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 struct {
	// Causes The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes *[]IoK8sApimachineryPkgApisMetaV1StatusCause `json:"causes,omitempty"`

	// Group The group attribute of the resource associated with the status StatusReason.
	Group *string `json:"group,omitempty"`

	// Kind The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Name The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `json:"name,omitempty"`

	// RetryAfterSeconds If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int32 `json:"retryAfterSeconds,omitempty"`

	// Uid UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `json:"uid,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusV2 Status is a return value for calls that don't return other objects.
type IoK8sApimachineryPkgApisMetaV1StatusV2 struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Code Suggested HTTP return code for this status, 0 if not set.
	Code *int32 `json:"code,omitempty"`

	// Details StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
	Details *IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 `json:"details,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// CreateBackupStorageJSONRequestBody defines body for CreateBackupStorage for application/json ContentType.
type CreateBackupStorageJSONRequestBody = CreateBackupStorageParams

// UpdateBackupStorageJSONRequestBody defines body for UpdateBackupStorage for application/json ContentType.
type UpdateBackupStorageJSONRequestBody = UpdateBackupStorageParams

// SetKubernetesClusterMonitoringJSONRequestBody defines body for SetKubernetesClusterMonitoring for application/json ContentType.
type SetKubernetesClusterMonitoringJSONRequestBody = KubernetesClusterMonitoring

// CreateDatabaseClusterBackupJSONRequestBody defines body for CreateDatabaseClusterBackup for application/json ContentType.
type CreateDatabaseClusterBackupJSONRequestBody = DatabaseClusterBackup

// CreateDatabaseClusterRestoreJSONRequestBody defines body for CreateDatabaseClusterRestore for application/json ContentType.
type CreateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// UpdateDatabaseClusterRestoreJSONRequestBody defines body for UpdateDatabaseClusterRestore for application/json ContentType.
type UpdateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// CreateDatabaseClusterJSONRequestBody defines body for CreateDatabaseCluster for application/json ContentType.
type CreateDatabaseClusterJSONRequestBody = DatabaseCluster

// UpdateDatabaseClusterJSONRequestBody defines body for UpdateDatabaseCluster for application/json ContentType.
type UpdateDatabaseClusterJSONRequestBody = DatabaseCluster

// UpdateDatabaseEngineJSONRequestBody defines body for UpdateDatabaseEngine for application/json ContentType.
type UpdateDatabaseEngineJSONRequestBody = DatabaseEngine

// CreateMonitoringInstanceJSONRequestBody defines body for CreateMonitoringInstance for application/json ContentType.
type CreateMonitoringInstanceJSONRequestBody = MonitoringInstanceCreateParams

// UpdateMonitoringInstanceJSONRequestBody defines body for UpdateMonitoringInstance for application/json ContentType.
type UpdateMonitoringInstanceJSONRequestBody = MonitoringInstanceUpdateParams

// AsDatabaseClusterSpecEngineResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu0
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu0() (DatabaseClusterSpecEngineResourcesCpu0, error) {
	var body DatabaseClusterSpecEngineResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu1
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu1() (DatabaseClusterSpecEngineResourcesCpu1, error) {
	var body DatabaseClusterSpecEngineResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory0
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory0() (DatabaseClusterSpecEngineResourcesMemory0, error) {
	var body DatabaseClusterSpecEngineResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory1
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory1() (DatabaseClusterSpecEngineResourcesMemory1, error) {
	var body DatabaseClusterSpecEngineResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineStorageSize0 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize0
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize0() (DatabaseClusterSpecEngineStorageSize0, error) {
	var body DatabaseClusterSpecEngineStorageSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineStorageSize1 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize1
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize1() (DatabaseClusterSpecEngineStorageSize1, error) {
	var body DatabaseClusterSpecEngineStorageSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Storage_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Storage_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits0
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits0() (DatabaseClusterSpecMonitoringResourcesLimits0, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits1
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits1() (DatabaseClusterSpecMonitoringResourcesLimits1, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests0
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests0() (DatabaseClusterSpecMonitoringResourcesRequests0, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests1
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests1() (DatabaseClusterSpecMonitoringResourcesRequests1, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu0
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu0() (DatabaseClusterSpecProxyResourcesCpu0, error) {
	var body DatabaseClusterSpecProxyResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu1
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu1() (DatabaseClusterSpecProxyResourcesCpu1, error) {
	var body DatabaseClusterSpecProxyResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory0
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory0() (DatabaseClusterSpecProxyResourcesMemory0, error) {
	var body DatabaseClusterSpecProxyResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory1
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory1() (DatabaseClusterSpecProxyResourcesMemory1, error) {
	var body DatabaseClusterSpecProxyResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of the created backup storages
	// (GET /backup-storages)
	ListBackupStorages(ctx echo.Context) error
	// Create a new backup storage object
	// (POST /backup-storages)
	CreateBackupStorage(ctx echo.Context) error
	// Delete the specified backup storage
	// (DELETE /backup-storages/{name})
	DeleteBackupStorage(ctx echo.Context, name string) error
	// Get the specified backup storage
	// (GET /backup-storages/{name})
	GetBackupStorage(ctx echo.Context, name string) error
	// Partial update of the specified backup storage
	// (PATCH /backup-storages/{name})
	UpdateBackupStorage(ctx echo.Context, name string) error
	// Get the cluster type and storage classes of a kubernetes cluster
	// (GET /cluster-info)
	GetKubernetesClusterInfo(ctx echo.Context) error
	// Manage Kubernetes cluster monitoring configuration
	// (POST /cluster-monitoring)
	SetKubernetesClusterMonitoring(ctx echo.Context) error
	// Create a database cluster backup on the specified kubernetes cluster
	// (POST /database-cluster-backups)
	CreateDatabaseClusterBackup(ctx echo.Context) error
	// Delete the specified cluster backup on the specified kubernetes cluster
	// (DELETE /database-cluster-backups/{name})
	DeleteDatabaseClusterBackup(ctx echo.Context, name string) error
	// Returns the specified cluster backup on the specified kubernetes cluster
	// (GET /database-cluster-backups/{name})
	GetDatabaseClusterBackup(ctx echo.Context, name string) error
	// Create a database cluster restore on the specified kubernetes cluster
	// (POST /database-cluster-restores)
	CreateDatabaseClusterRestore(ctx echo.Context) error
	// Delete the specified cluster restore on the specified kubernetes cluster
	// (DELETE /database-cluster-restores/{name})
	DeleteDatabaseClusterRestore(ctx echo.Context, name string) error
	// Returns the specified cluster restore on the specified kubernetes cluster
	// (GET /database-cluster-restores/{name})
	GetDatabaseClusterRestore(ctx echo.Context, name string) error
	// Replace the specified cluster restore on the specified kubernetes cluster
	// (PUT /database-cluster-restores/{name})
	UpdateDatabaseClusterRestore(ctx echo.Context, name string) error
	// List of the created database clusters on the specified kubernetes cluster
	// (GET /database-clusters)
	ListDatabaseClusters(ctx echo.Context) error
	// Create a database cluster on the specified kubernetes cluster
	// (POST /database-clusters)
	CreateDatabaseCluster(ctx echo.Context) error
	// Delete the specified database cluster on the specified kubernetes cluster
	// (DELETE /database-clusters/{name})
	DeleteDatabaseCluster(ctx echo.Context, name string) error
	// Get the specified database cluster on the specified kubernetes cluster
	// (GET /database-clusters/{name})
	GetDatabaseCluster(ctx echo.Context, name string) error
	// Replace the specified database cluster on the specified kubernetes cluster
	// (PUT /database-clusters/{name})
	UpdateDatabaseCluster(ctx echo.Context, name string) error
	// List of the created database cluster backups on the specified kubernetes cluster
	// (GET /database-clusters/{name}/backups)
	ListDatabaseClusterBackups(ctx echo.Context, name string) error
	// Get the specified database cluster credentials on the specified kubernetes cluster
	// (GET /database-clusters/{name}/credentials)
	GetDatabaseClusterCredentials(ctx echo.Context, name string) error
	// List of the created database cluster restores on the specified kubernetes cluster
	// (GET /database-clusters/{name}/restores)
	ListDatabaseClusterRestores(ctx echo.Context, name string) error
	// List of the available database engines on the specified kubernetes cluster
	// (GET /database-engines)
	ListDatabaseEngines(ctx echo.Context) error
	// Get the specified database engine on the specified kubernetes cluster
	// (GET /database-engines/{name})
	GetDatabaseEngine(ctx echo.Context, name string) error
	// Update the specified database engine on the specified kubernetes cluster
	// (PUT /database-engines/{name})
	UpdateDatabaseEngine(ctx echo.Context, name string) error
	// List of the created monitoring instances
	// (GET /monitoring-instances)
	ListMonitoringInstances(ctx echo.Context) error
	// Create a new monitoring instance object
	// (POST /monitoring-instances)
	CreateMonitoringInstance(ctx echo.Context) error
	// Delete the specified Monitoring instance
	// (DELETE /monitoring-instances/{name})
	DeleteMonitoringInstance(ctx echo.Context, name string) error
	// Get the specified monitoring instance
	// (GET /monitoring-instances/{name})
	GetMonitoringInstance(ctx echo.Context, name string) error
	// Update the specified Monitoring instance
	// (PATCH /monitoring-instances/{name})
	UpdateMonitoringInstance(ctx echo.Context, name string) error
	// Get the capacity and available resources of a kubernetes cluster
	// (GET /resources)
	GetKubernetesClusterResources(ctx echo.Context) error
	// Get Everest Backend version info
	// (GET /version)
	VersionInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListBackupStorages converts echo context to params.
func (w *ServerInterfaceWrapper) ListBackupStorages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListBackupStorages(ctx)
	return err
}

// CreateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBackupStorage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBackupStorage(ctx)
	return err
}

// DeleteBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBackupStorage(ctx, name)
	return err
}

// GetBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBackupStorage(ctx, name)
	return err
}

// UpdateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBackupStorage(ctx, name)
	return err
}

// GetKubernetesClusterInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetKubernetesClusterInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKubernetesClusterInfo(ctx)
	return err
}

// SetKubernetesClusterMonitoring converts echo context to params.
func (w *ServerInterfaceWrapper) SetKubernetesClusterMonitoring(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetKubernetesClusterMonitoring(ctx)
	return err
}

// CreateDatabaseClusterBackup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterBackup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseClusterBackup(ctx)
	return err
}

// DeleteDatabaseClusterBackup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseClusterBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseClusterBackup(ctx, name)
	return err
}

// GetDatabaseClusterBackup converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterBackup(ctx, name)
	return err
}

// CreateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterRestore(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseClusterRestore(ctx)
	return err
}

// DeleteDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseClusterRestore(ctx, name)
	return err
}

// GetDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterRestore(ctx, name)
	return err
}

// UpdateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseClusterRestore(ctx, name)
	return err
}

// ListDatabaseClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusters(ctx)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseCluster(ctx)
	return err
}

// DeleteDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseCluster(ctx, name)
	return err
}

// GetDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseCluster(ctx, name)
	return err
}

// UpdateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseCluster(ctx, name)
	return err
}

// ListDatabaseClusterBackups converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusterBackups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusterBackups(ctx, name)
	return err
}

// GetDatabaseClusterCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterCredentials(ctx, name)
	return err
}

// ListDatabaseClusterRestores converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusterRestores(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusterRestores(ctx, name)
	return err
}

// ListDatabaseEngines converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseEngines(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseEngines(ctx)
	return err
}

// GetDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseEngine(ctx, name)
	return err
}

// UpdateDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseEngine(ctx, name)
	return err
}

// ListMonitoringInstances converts echo context to params.
func (w *ServerInterfaceWrapper) ListMonitoringInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMonitoringInstances(ctx)
	return err
}

// CreateMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMonitoringInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMonitoringInstance(ctx)
	return err
}

// DeleteMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMonitoringInstance(ctx, name)
	return err
}

// GetMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonitoringInstance(ctx, name)
	return err
}

// UpdateMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMonitoringInstance(ctx, name)
	return err
}

// GetKubernetesClusterResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetKubernetesClusterResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKubernetesClusterResources(ctx)
	return err
}

// VersionInfo converts echo context to params.
func (w *ServerInterfaceWrapper) VersionInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VersionInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/backup-storages", wrapper.ListBackupStorages)
	router.POST(baseURL+"/backup-storages", wrapper.CreateBackupStorage)
	router.DELETE(baseURL+"/backup-storages/:name", wrapper.DeleteBackupStorage)
	router.GET(baseURL+"/backup-storages/:name", wrapper.GetBackupStorage)
	router.PATCH(baseURL+"/backup-storages/:name", wrapper.UpdateBackupStorage)
	router.GET(baseURL+"/cluster-info", wrapper.GetKubernetesClusterInfo)
	router.POST(baseURL+"/cluster-monitoring", wrapper.SetKubernetesClusterMonitoring)
	router.POST(baseURL+"/database-cluster-backups", wrapper.CreateDatabaseClusterBackup)
	router.DELETE(baseURL+"/database-cluster-backups/:name", wrapper.DeleteDatabaseClusterBackup)
	router.GET(baseURL+"/database-cluster-backups/:name", wrapper.GetDatabaseClusterBackup)
	router.POST(baseURL+"/database-cluster-restores", wrapper.CreateDatabaseClusterRestore)
	router.DELETE(baseURL+"/database-cluster-restores/:name", wrapper.DeleteDatabaseClusterRestore)
	router.GET(baseURL+"/database-cluster-restores/:name", wrapper.GetDatabaseClusterRestore)
	router.PUT(baseURL+"/database-cluster-restores/:name", wrapper.UpdateDatabaseClusterRestore)
	router.GET(baseURL+"/database-clusters", wrapper.ListDatabaseClusters)
	router.POST(baseURL+"/database-clusters", wrapper.CreateDatabaseCluster)
	router.DELETE(baseURL+"/database-clusters/:name", wrapper.DeleteDatabaseCluster)
	router.GET(baseURL+"/database-clusters/:name", wrapper.GetDatabaseCluster)
	router.PUT(baseURL+"/database-clusters/:name", wrapper.UpdateDatabaseCluster)
	router.GET(baseURL+"/database-clusters/:name/backups", wrapper.ListDatabaseClusterBackups)
	router.GET(baseURL+"/database-clusters/:name/credentials", wrapper.GetDatabaseClusterCredentials)
	router.GET(baseURL+"/database-clusters/:name/restores", wrapper.ListDatabaseClusterRestores)
	router.GET(baseURL+"/database-engines", wrapper.ListDatabaseEngines)
	router.GET(baseURL+"/database-engines/:name", wrapper.GetDatabaseEngine)
	router.PUT(baseURL+"/database-engines/:name", wrapper.UpdateDatabaseEngine)
	router.GET(baseURL+"/monitoring-instances", wrapper.ListMonitoringInstances)
	router.POST(baseURL+"/monitoring-instances", wrapper.CreateMonitoringInstance)
	router.DELETE(baseURL+"/monitoring-instances/:name", wrapper.DeleteMonitoringInstance)
	router.GET(baseURL+"/monitoring-instances/:name", wrapper.GetMonitoringInstance)
	router.PATCH(baseURL+"/monitoring-instances/:name", wrapper.UpdateMonitoringInstance)
	router.GET(baseURL+"/resources", wrapper.GetKubernetesClusterResources)
	router.GET(baseURL+"/version", wrapper.VersionInfo)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
