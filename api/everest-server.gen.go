// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for BackupStorageType.
const (
	BackupStorageTypeAzure BackupStorageType = "azure"
	BackupStorageTypeGcs   BackupStorageType = "gcs"
	BackupStorageTypeS3    BackupStorageType = "s3"
)

// Defines values for CreateBackupStorageParamsType.
const (
	CreateBackupStorageParamsTypeAzure CreateBackupStorageParamsType = "azure"
	CreateBackupStorageParamsTypeGcs   CreateBackupStorageParamsType = "gcs"
	CreateBackupStorageParamsTypeS3    CreateBackupStorageParamsType = "s3"
)

// Defines values for DatabaseClusterSpecProxyExposeType.
const (
	DatabaseClusterSpecProxyExposeTypeExternal DatabaseClusterSpecProxyExposeType = "external"
	DatabaseClusterSpecProxyExposeTypeInternal DatabaseClusterSpecProxyExposeType = "internal"
)

// Defines values for DatabaseClusterSpecProxyType.
const (
	DatabaseClusterSpecProxyTypeHaproxy   DatabaseClusterSpecProxyType = "haproxy"
	DatabaseClusterSpecProxyTypeMongos    DatabaseClusterSpecProxyType = "mongos"
	DatabaseClusterSpecProxyTypePgbouncer DatabaseClusterSpecProxyType = "pgbouncer"
	DatabaseClusterSpecProxyTypeProxysql  DatabaseClusterSpecProxyType = "proxysql"
)

// Defines values for DatabaseClusterRestoreStatusConditionsStatus.
const (
	DatabaseClusterRestoreStatusConditionsStatusFalse   DatabaseClusterRestoreStatusConditionsStatus = "False"
	DatabaseClusterRestoreStatusConditionsStatusTrue    DatabaseClusterRestoreStatusConditionsStatus = "True"
	DatabaseClusterRestoreStatusConditionsStatusUnknown DatabaseClusterRestoreStatusConditionsStatus = "Unknown"
)

// Defines values for DatabaseClusterRestoreWithNameStatusConditionsStatus.
const (
	DatabaseClusterRestoreWithNameStatusConditionsStatusFalse   DatabaseClusterRestoreWithNameStatusConditionsStatus = "False"
	DatabaseClusterRestoreWithNameStatusConditionsStatusTrue    DatabaseClusterRestoreWithNameStatusConditionsStatus = "True"
	DatabaseClusterRestoreWithNameStatusConditionsStatusUnknown DatabaseClusterRestoreWithNameStatusConditionsStatus = "Unknown"
)

// Defines values for DatabaseClusterWithNameSpecProxyExposeType.
const (
	DatabaseClusterWithNameSpecProxyExposeTypeExternal DatabaseClusterWithNameSpecProxyExposeType = "external"
	DatabaseClusterWithNameSpecProxyExposeTypeInternal DatabaseClusterWithNameSpecProxyExposeType = "internal"
)

// Defines values for DatabaseClusterWithNameSpecProxyType.
const (
	DatabaseClusterWithNameSpecProxyTypeHaproxy   DatabaseClusterWithNameSpecProxyType = "haproxy"
	DatabaseClusterWithNameSpecProxyTypeMongos    DatabaseClusterWithNameSpecProxyType = "mongos"
	DatabaseClusterWithNameSpecProxyTypePgbouncer DatabaseClusterWithNameSpecProxyType = "pgbouncer"
	DatabaseClusterWithNameSpecProxyTypeProxysql  DatabaseClusterWithNameSpecProxyType = "proxysql"
)

// BackupStorage Backup storage information
type BackupStorage struct {
	BucketName string            `json:"bucketName"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	Region     string            `json:"region"`
	Type       BackupStorageType `json:"type"`
	Url        *string           `json:"url,omitempty"`
}

// BackupStorageType defines model for BackupStorage.Type.
type BackupStorageType string

// BackupStoragesList defines model for BackupStoragesList.
type BackupStoragesList = []BackupStorage

// CreateBackupStorageParams Backup storage parameters
type CreateBackupStorageParams struct {
	AccessKey string `json:"accessKey"`

	// BucketName The cloud storage bucket/container name
	BucketName string `json:"bucketName"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                        `json:"name"`
	Region    string                        `json:"region"`
	SecretKey string                        `json:"secretKey"`
	Type      CreateBackupStorageParamsType `json:"type"`
	Url       *string                       `json:"url,omitempty"`
}

// CreateBackupStorageParamsType defines model for CreateBackupStorageParams.Type.
type CreateBackupStorageParamsType string

// CreateKubernetesClusterParams kubernetes object
type CreateKubernetesClusterParams struct {
	Kubeconfig string  `json:"kubeconfig"`
	Name       string  `json:"name"`
	Namespace  *string `json:"namespace,omitempty"`
}

// DatabaseCluster defines model for DatabaseCluster.
type DatabaseCluster struct {
	// Spec DatabaseClusterSpec defines the desired state of DatabaseCluster.
	Spec struct {
		// Backup Backup is the backup specification
		Backup *struct {
			// Enabled Enabled is a flag to enable backups
			Enabled bool `json:"enabled"`

			// Schedules Schedules is a list of backup schedules
			Schedules *[]struct {
				// Enabled Enabled is a flag to enable the schedule
				Enabled bool `json:"enabled"`

				// Name Name is the name of the schedule
				Name string `json:"name"`

				// ObjectStorageName ObjectStorageName is the name of the ObjectStorage CR that defines the storage location
				ObjectStorageName string `json:"objectStorageName"`

				// RetentionCopies RetentionCopies is the number of backup copies to retain
				RetentionCopies *int32 `json:"retentionCopies,omitempty"`

				// Schedule Schedule is the cron schedule
				Schedule string `json:"schedule"`
			} `json:"schedules,omitempty"`
		} `json:"backup,omitempty"`

		// DataSource DataSource defines a data source for bootstraping a new cluster
		DataSource *struct {
			// BackupName BackupName is the name of the backup from backup location to use
			BackupName string `json:"backupName"`

			// ObjectStorageName ObjectStorageName is the name of the ObjectStorage CR that defines the storage location
			ObjectStorageName string `json:"objectStorageName"`
		} `json:"dataSource,omitempty"`

		// Engine Engine is the database engine specification
		Engine struct {
			// Config Config is the engine configuration
			Config *string `json:"config,omitempty"`

			// Replicas Replicas is the number of engine replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each engine replica. If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Engine_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Engine_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Storage Storage is the engine storage configuration
			Storage struct {
				// Class Class is the storage class to use for the persistent volume claim
				Class *string `json:"class,omitempty"`

				// Size Size is the size of the persistent volume claim
				Size DatabaseCluster_Spec_Engine_Storage_Size `json:"size"`
			} `json:"storage"`

			// Type Type is the engine type
			Type string `json:"type"`

			// UserSecretsName UserSecretsName is the name of the secret containing the user secrets
			UserSecretsName *string `json:"userSecretsName,omitempty"`

			// Version Version is the engine version
			Version *string `json:"version,omitempty"`
		} `json:"engine"`

		// Monitoring Monitoring is the monitoring specification
		Monitoring *struct {
			// Enabled Enabled is a flag to enable monitoring
			Enabled bool `json:"enabled"`

			// Pmm PMMSpec contains PMM settings.
			Pmm *struct {
				Image         *string `json:"image,omitempty"`
				Login         *string `json:"login,omitempty"`
				Password      *string `json:"password,omitempty"`
				PublicAddress *string `json:"publicAddress,omitempty"`
				ServerHost    *string `json:"serverHost,omitempty"`
				ServerUser    *string `json:"serverUser,omitempty"`
			} `json:"pmm,omitempty"`

			// Resources ResourceRequirements describes the compute resource requirements.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
				//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
				//  This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
					Name string `json:"name"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
		} `json:"monitoring,omitempty"`

		// Paused Paused is a flag to stop the cluster
		Paused *bool `json:"paused,omitempty"`

		// Proxy Proxy is the proxy specification. If not set, an appropriate proxy specification will be applied for the given engine. A common use case for setting this field is to control the external access to the database cluster.
		Proxy *struct {
			// Config Config is the proxy configuration
			Config *string `json:"config,omitempty"`

			// Expose Expose is the proxy expose configuration
			Expose *struct {
				// IpSourceRanges IPSourceRanges is the list of IP source ranges (CIDR notation) to allow access from. If not set, there is no limitations
				IpSourceRanges *[]string `json:"ipSourceRanges,omitempty"`

				// Type Type is the expose type, can be internal or external
				Type *DatabaseClusterSpecProxyExposeType `json:"type,omitempty"`
			} `json:"expose,omitempty"`

			// Replicas Replicas is the number of proxy replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each proxy replica. If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Proxy_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Proxy_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Type Type is the proxy type
			Type *DatabaseClusterSpecProxyType `json:"type,omitempty"`
		} `json:"proxy,omitempty"`
	} `json:"spec"`

	// Status DatabaseClusterStatus defines the observed state of DatabaseCluster.
	Status *struct {
		// Hostname Hostname is the hostname where the cluster can be reached
		Hostname *string `json:"hostname,omitempty"`

		// Message Message is extra information about the cluster
		Message *string `json:"message,omitempty"`

		// Port Port is the port where the cluster can be reached
		Port *int32 `json:"port,omitempty"`

		// Ready Ready is the number of ready pods
		Ready *int32 `json:"ready,omitempty"`

		// Size Size is the total number of pods
		Size *int32 `json:"size,omitempty"`

		// Status Status is the status of the cluster
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterSpecEngineResourcesCpu0 defines model for .
type DatabaseClusterSpecEngineResourcesCpu0 = int

// DatabaseClusterSpecEngineResourcesCpu1 defines model for .
type DatabaseClusterSpecEngineResourcesCpu1 = string

// DatabaseCluster_Spec_Engine_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Engine_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineResourcesMemory0 defines model for .
type DatabaseClusterSpecEngineResourcesMemory0 = int

// DatabaseClusterSpecEngineResourcesMemory1 defines model for .
type DatabaseClusterSpecEngineResourcesMemory1 = string

// DatabaseCluster_Spec_Engine_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Engine_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineStorageSize0 defines model for .
type DatabaseClusterSpecEngineStorageSize0 = int

// DatabaseClusterSpecEngineStorageSize1 defines model for .
type DatabaseClusterSpecEngineStorageSize1 = string

// DatabaseCluster_Spec_Engine_Storage_Size Size is the size of the persistent volume claim
type DatabaseCluster_Spec_Engine_Storage_Size struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesLimits0 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits0 = int

// DatabaseClusterSpecMonitoringResourcesLimits1 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Limits.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesRequests0 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests0 = int

// DatabaseClusterSpecMonitoringResourcesRequests1 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Requests.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyExposeType Type is the expose type, can be internal or external
type DatabaseClusterSpecProxyExposeType string

// DatabaseClusterSpecProxyResourcesCpu0 defines model for .
type DatabaseClusterSpecProxyResourcesCpu0 = int

// DatabaseClusterSpecProxyResourcesCpu1 defines model for .
type DatabaseClusterSpecProxyResourcesCpu1 = string

// DatabaseCluster_Spec_Proxy_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyResourcesMemory0 defines model for .
type DatabaseClusterSpecProxyResourcesMemory0 = int

// DatabaseClusterSpecProxyResourcesMemory1 defines model for .
type DatabaseClusterSpecProxyResourcesMemory1 = string

// DatabaseCluster_Spec_Proxy_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyType Type is the proxy type
type DatabaseClusterSpecProxyType string

// DatabaseClusterCredential kubernetes object
type DatabaseClusterCredential struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// DatabaseClusterList DatabaseClusterList is an object that contains the list of the existing database clusters.
type DatabaseClusterList struct {
	Items *[]DatabaseClusterWithName `json:"items,omitempty"`
}

// DatabaseClusterRestore DatabaseClusterRestore is the Schema for the databaseclusterrestores API.
type DatabaseClusterRestore struct {
	// Spec DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
	Spec struct {
		BackupName *string `json:"backupName,omitempty"`

		// BackupSource BackupSource represents settings of a source where to get a backup to run restoration.
		BackupSource *struct {
			// Azure BackupStorageProviderSpec represents set of settings to configure cloud provider.
			Azure *struct {
				Bucket *string `json:"bucket,omitempty"`

				// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
				ContainerName     *string `json:"containerName,omitempty"`
				CredentialsSecret string  `json:"credentialsSecret"`
				EndpointUrl       *string `json:"endpointUrl,omitempty"`
				Prefix            *string `json:"prefix,omitempty"`
				Region            *string `json:"region,omitempty"`

				// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
				StorageClass *string `json:"storageClass,omitempty"`
			} `json:"azure,omitempty"`
			Destination *string `json:"destination,omitempty"`
			Image       *string `json:"image,omitempty"`

			// S3 BackupStorageProviderSpec represents set of settings to configure cloud provider.
			S3 *struct {
				Bucket *string `json:"bucket,omitempty"`

				// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
				ContainerName     *string `json:"containerName,omitempty"`
				CredentialsSecret string  `json:"credentialsSecret"`
				EndpointUrl       *string `json:"endpointUrl,omitempty"`
				Prefix            *string `json:"prefix,omitempty"`
				Region            *string `json:"region,omitempty"`

				// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
				StorageClass *string `json:"storageClass,omitempty"`
			} `json:"s3,omitempty"`
			SslInternalSecretName *string `json:"sslInternalSecretName,omitempty"`
			SslSecretName         *string `json:"sslSecretName,omitempty"`
			StorageName           *string `json:"storageName,omitempty"`

			// StorageType BackupStorageType represents backup storage type.
			StorageType     string  `json:"storage_type"`
			VaultSecretName *string `json:"vaultSecretName,omitempty"`
		} `json:"backupSource,omitempty"`
		DatabaseCluster string `json:"databaseCluster"`

		// DatabaseType EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		DatabaseType string `json:"databaseType"`
	} `json:"spec"`

	// Status DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
	Status *struct {
		Completed  *time.Time `json:"completed,omitempty"`
		Conditions *[]struct {
			// LastTransitionTime lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
			LastTransitionTime time.Time `json:"lastTransitionTime"`

			// Message message is a human readable message indicating details about the transition. This may be an empty string.
			Message string `json:"message"`

			// ObservedGeneration observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
			ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

			// Reason reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
			Reason string `json:"reason"`

			// Status status of the condition, one of True, False, Unknown.
			Status DatabaseClusterRestoreStatusConditionsStatus `json:"status"`

			// Type type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
			Type string `json:"type"`
		} `json:"conditions,omitempty"`
		Destination   *string    `json:"destination,omitempty"`
		Lastscheduled *time.Time `json:"lastscheduled,omitempty"`
		Message       *string    `json:"message,omitempty"`

		// State RestoreState represents state of restoration.
		State       *string `json:"state,omitempty"`
		StorageName *string `json:"storageName,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterRestoreStatusConditionsStatus status of the condition, one of True, False, Unknown.
type DatabaseClusterRestoreStatusConditionsStatus string

// DatabaseClusterRestoreList DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores.
type DatabaseClusterRestoreList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                           `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterRestoreWithName `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterRestoreWithName defines model for DatabaseClusterRestoreWithName.
type DatabaseClusterRestoreWithName struct {
	Name string `json:"name"`

	// Spec DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
	Spec struct {
		BackupName *string `json:"backupName,omitempty"`

		// BackupSource BackupSource represents settings of a source where to get a backup to run restoration.
		BackupSource *struct {
			// Azure BackupStorageProviderSpec represents set of settings to configure cloud provider.
			Azure *struct {
				Bucket *string `json:"bucket,omitempty"`

				// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
				ContainerName     *string `json:"containerName,omitempty"`
				CredentialsSecret string  `json:"credentialsSecret"`
				EndpointUrl       *string `json:"endpointUrl,omitempty"`
				Prefix            *string `json:"prefix,omitempty"`
				Region            *string `json:"region,omitempty"`

				// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
				StorageClass *string `json:"storageClass,omitempty"`
			} `json:"azure,omitempty"`
			Destination *string `json:"destination,omitempty"`
			Image       *string `json:"image,omitempty"`

			// S3 BackupStorageProviderSpec represents set of settings to configure cloud provider.
			S3 *struct {
				Bucket *string `json:"bucket,omitempty"`

				// ContainerName A container name is a valid DNS name that conforms to the Azure naming rules.
				ContainerName     *string `json:"containerName,omitempty"`
				CredentialsSecret string  `json:"credentialsSecret"`
				EndpointUrl       *string `json:"endpointUrl,omitempty"`
				Prefix            *string `json:"prefix,omitempty"`
				Region            *string `json:"region,omitempty"`

				// StorageClass STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
				StorageClass *string `json:"storageClass,omitempty"`
			} `json:"s3,omitempty"`
			SslInternalSecretName *string `json:"sslInternalSecretName,omitempty"`
			SslSecretName         *string `json:"sslSecretName,omitempty"`
			StorageName           *string `json:"storageName,omitempty"`

			// StorageType BackupStorageType represents backup storage type.
			StorageType     string  `json:"storage_type"`
			VaultSecretName *string `json:"vaultSecretName,omitempty"`
		} `json:"backupSource,omitempty"`
		DatabaseCluster string `json:"databaseCluster"`

		// DatabaseType EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		DatabaseType string `json:"databaseType"`
	} `json:"spec"`

	// Status DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
	Status *struct {
		Completed  *time.Time `json:"completed,omitempty"`
		Conditions *[]struct {
			// LastTransitionTime lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
			LastTransitionTime time.Time `json:"lastTransitionTime"`

			// Message message is a human readable message indicating details about the transition. This may be an empty string.
			Message string `json:"message"`

			// ObservedGeneration observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
			ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

			// Reason reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
			Reason string `json:"reason"`

			// Status status of the condition, one of True, False, Unknown.
			Status DatabaseClusterRestoreWithNameStatusConditionsStatus `json:"status"`

			// Type type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
			Type string `json:"type"`
		} `json:"conditions,omitempty"`
		Destination   *string    `json:"destination,omitempty"`
		Lastscheduled *time.Time `json:"lastscheduled,omitempty"`
		Message       *string    `json:"message,omitempty"`

		// State RestoreState represents state of restoration.
		State       *string `json:"state,omitempty"`
		StorageName *string `json:"storageName,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterRestoreWithNameStatusConditionsStatus status of the condition, one of True, False, Unknown.
type DatabaseClusterRestoreWithNameStatusConditionsStatus string

// DatabaseClusterWithName defines model for DatabaseClusterWithName.
type DatabaseClusterWithName struct {
	Name string `json:"name"`

	// Spec DatabaseClusterSpec defines the desired state of DatabaseCluster.
	Spec struct {
		// Backup Backup is the backup specification
		Backup *struct {
			// Enabled Enabled is a flag to enable backups
			Enabled bool `json:"enabled"`

			// Schedules Schedules is a list of backup schedules
			Schedules *[]struct {
				// Enabled Enabled is a flag to enable the schedule
				Enabled bool `json:"enabled"`

				// Name Name is the name of the schedule
				Name string `json:"name"`

				// ObjectStorageName ObjectStorageName is the name of the ObjectStorage CR that defines the storage location
				ObjectStorageName string `json:"objectStorageName"`

				// RetentionCopies RetentionCopies is the number of backup copies to retain
				RetentionCopies *int32 `json:"retentionCopies,omitempty"`

				// Schedule Schedule is the cron schedule
				Schedule string `json:"schedule"`
			} `json:"schedules,omitempty"`
		} `json:"backup,omitempty"`

		// DataSource DataSource defines a data source for bootstraping a new cluster
		DataSource *struct {
			// BackupName BackupName is the name of the backup from backup location to use
			BackupName string `json:"backupName"`

			// ObjectStorageName ObjectStorageName is the name of the ObjectStorage CR that defines the storage location
			ObjectStorageName string `json:"objectStorageName"`
		} `json:"dataSource,omitempty"`

		// Engine Engine is the database engine specification
		Engine struct {
			// Config Config is the engine configuration
			Config *string `json:"config,omitempty"`

			// Replicas Replicas is the number of engine replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each engine replica. If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseClusterWithName_Spec_Engine_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseClusterWithName_Spec_Engine_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Storage Storage is the engine storage configuration
			Storage struct {
				// Class Class is the storage class to use for the persistent volume claim
				Class *string `json:"class,omitempty"`

				// Size Size is the size of the persistent volume claim
				Size DatabaseClusterWithName_Spec_Engine_Storage_Size `json:"size"`
			} `json:"storage"`

			// Type Type is the engine type
			Type string `json:"type"`

			// UserSecretsName UserSecretsName is the name of the secret containing the user secrets
			UserSecretsName *string `json:"userSecretsName,omitempty"`

			// Version Version is the engine version
			Version *string `json:"version,omitempty"`
		} `json:"engine"`

		// Monitoring Monitoring is the monitoring specification
		Monitoring *struct {
			// Enabled Enabled is a flag to enable monitoring
			Enabled bool `json:"enabled"`

			// Pmm PMMSpec contains PMM settings.
			Pmm *struct {
				Image         *string `json:"image,omitempty"`
				Login         *string `json:"login,omitempty"`
				Password      *string `json:"password,omitempty"`
				PublicAddress *string `json:"publicAddress,omitempty"`
				ServerHost    *string `json:"serverHost,omitempty"`
				ServerUser    *string `json:"serverUser,omitempty"`
			} `json:"pmm,omitempty"`

			// Resources ResourceRequirements describes the compute resource requirements.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
				//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
				//  This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
					Name string `json:"name"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
		} `json:"monitoring,omitempty"`

		// Paused Paused is a flag to stop the cluster
		Paused *bool `json:"paused,omitempty"`

		// Proxy Proxy is the proxy specification. If not set, an appropriate proxy specification will be applied for the given engine. A common use case for setting this field is to control the external access to the database cluster.
		Proxy *struct {
			// Config Config is the proxy configuration
			Config *string `json:"config,omitempty"`

			// Expose Expose is the proxy expose configuration
			Expose *struct {
				// IpSourceRanges IPSourceRanges is the list of IP source ranges (CIDR notation) to allow access from. If not set, there is no limitations
				IpSourceRanges *[]string `json:"ipSourceRanges,omitempty"`

				// Type Type is the expose type, can be internal or external
				Type *DatabaseClusterWithNameSpecProxyExposeType `json:"type,omitempty"`
			} `json:"expose,omitempty"`

			// Replicas Replicas is the number of proxy replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each proxy replica. If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseClusterWithName_Spec_Proxy_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseClusterWithName_Spec_Proxy_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Type Type is the proxy type
			Type *DatabaseClusterWithNameSpecProxyType `json:"type,omitempty"`
		} `json:"proxy,omitempty"`
	} `json:"spec"`

	// Status DatabaseClusterStatus defines the observed state of DatabaseCluster.
	Status *struct {
		// Hostname Hostname is the hostname where the cluster can be reached
		Hostname *string `json:"hostname,omitempty"`

		// Message Message is extra information about the cluster
		Message *string `json:"message,omitempty"`

		// Port Port is the port where the cluster can be reached
		Port *int32 `json:"port,omitempty"`

		// Ready Ready is the number of ready pods
		Ready *int32 `json:"ready,omitempty"`

		// Size Size is the total number of pods
		Size *int32 `json:"size,omitempty"`

		// Status Status is the status of the cluster
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterWithNameSpecEngineResourcesCpu0 defines model for .
type DatabaseClusterWithNameSpecEngineResourcesCpu0 = int

// DatabaseClusterWithNameSpecEngineResourcesCpu1 defines model for .
type DatabaseClusterWithNameSpecEngineResourcesCpu1 = string

// DatabaseClusterWithName_Spec_Engine_Resources_Cpu CPU is the CPU resource requirements
type DatabaseClusterWithName_Spec_Engine_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecEngineResourcesMemory0 defines model for .
type DatabaseClusterWithNameSpecEngineResourcesMemory0 = int

// DatabaseClusterWithNameSpecEngineResourcesMemory1 defines model for .
type DatabaseClusterWithNameSpecEngineResourcesMemory1 = string

// DatabaseClusterWithName_Spec_Engine_Resources_Memory Memory is the memory resource requirements
type DatabaseClusterWithName_Spec_Engine_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecEngineStorageSize0 defines model for .
type DatabaseClusterWithNameSpecEngineStorageSize0 = int

// DatabaseClusterWithNameSpecEngineStorageSize1 defines model for .
type DatabaseClusterWithNameSpecEngineStorageSize1 = string

// DatabaseClusterWithName_Spec_Engine_Storage_Size Size is the size of the persistent volume claim
type DatabaseClusterWithName_Spec_Engine_Storage_Size struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecMonitoringResourcesLimits0 defines model for .
type DatabaseClusterWithNameSpecMonitoringResourcesLimits0 = int

// DatabaseClusterWithNameSpecMonitoringResourcesLimits1 defines model for .
type DatabaseClusterWithNameSpecMonitoringResourcesLimits1 = string

// DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties defines model for DatabaseClusterWithName.Spec.Monitoring.Resources.Limits.AdditionalProperties.
type DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecMonitoringResourcesRequests0 defines model for .
type DatabaseClusterWithNameSpecMonitoringResourcesRequests0 = int

// DatabaseClusterWithNameSpecMonitoringResourcesRequests1 defines model for .
type DatabaseClusterWithNameSpecMonitoringResourcesRequests1 = string

// DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties defines model for DatabaseClusterWithName.Spec.Monitoring.Resources.Requests.AdditionalProperties.
type DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecProxyExposeType Type is the expose type, can be internal or external
type DatabaseClusterWithNameSpecProxyExposeType string

// DatabaseClusterWithNameSpecProxyResourcesCpu0 defines model for .
type DatabaseClusterWithNameSpecProxyResourcesCpu0 = int

// DatabaseClusterWithNameSpecProxyResourcesCpu1 defines model for .
type DatabaseClusterWithNameSpecProxyResourcesCpu1 = string

// DatabaseClusterWithName_Spec_Proxy_Resources_Cpu CPU is the CPU resource requirements
type DatabaseClusterWithName_Spec_Proxy_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecProxyResourcesMemory0 defines model for .
type DatabaseClusterWithNameSpecProxyResourcesMemory0 = int

// DatabaseClusterWithNameSpecProxyResourcesMemory1 defines model for .
type DatabaseClusterWithNameSpecProxyResourcesMemory1 = string

// DatabaseClusterWithName_Spec_Proxy_Resources_Memory Memory is the memory resource requirements
type DatabaseClusterWithName_Spec_Proxy_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterWithNameSpecProxyType Type is the proxy type
type DatabaseClusterWithNameSpecProxyType string

// DatabaseEngine DatabaseEngine is the Schema for the databaseengines API.
type DatabaseEngine struct {
	// Spec DatabaseEngineSpec is a spec for a database engine.
	Spec struct {
		AllowedVersions *[]string `json:"allowedVersions,omitempty"`

		// Type EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		Type string `json:"type"`
	} `json:"spec"`

	// Status DatabaseEngineStatus defines the observed state of DatabaseEngine.
	Status *struct {
		// AvailableVersions Versions struct represents available versions of database engine components.
		AvailableVersions *struct {
			Backup *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"backup,omitempty"`
			Engine *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"engine,omitempty"`
			Proxy *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"proxy,omitempty"`
			Tools *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"tools,omitempty"`
		} `json:"availableVersions,omitempty"`
		OperatorVersion *string `json:"operatorVersion,omitempty"`

		// Status EngineState represents state of engine in a k8s cluster.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseEngineList DatabaseEngineList is an object that contains the list of the existing database engines.
type DatabaseEngineList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                   `json:"apiVersion,omitempty"`
	Items      *[]DatabaseEngineWithName `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseEngineWithName defines model for DatabaseEngineWithName.
type DatabaseEngineWithName struct {
	Name string `json:"name"`

	// Spec DatabaseEngineSpec is a spec for a database engine.
	Spec struct {
		AllowedVersions *[]string `json:"allowedVersions,omitempty"`

		// Type EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		Type string `json:"type"`
	} `json:"spec"`

	// Status DatabaseEngineStatus defines the observed state of DatabaseEngine.
	Status *struct {
		// AvailableVersions Versions struct represents available versions of database engine components.
		AvailableVersions *struct {
			Backup *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"backup,omitempty"`
			Engine *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"engine,omitempty"`
			Proxy *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"proxy,omitempty"`
			Tools *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"tools,omitempty"`
		} `json:"availableVersions,omitempty"`
		OperatorVersion *string `json:"operatorVersion,omitempty"`

		// Status EngineState represents state of engine in a k8s cluster.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// Error Error response
type Error struct {
	Message *string `json:"message,omitempty"`
}

// KubernetesCluster kubernetes object
type KubernetesCluster struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// KubernetesClusterList defines model for KubernetesClusterList.
type KubernetesClusterList = []KubernetesCluster

// PMMInstance PMM instance information
type PMMInstance struct {
	ApiKeySecretId string  `json:"apiKeySecretId"`
	Id             *string `json:"id,omitempty"`
	Url            string  `json:"url"`
}

// PMMInstanceCreateParams PMM instance create information
type PMMInstanceCreateParams struct {
	ApiKey string `json:"apiKey"`
	Url    string `json:"url"`
}

// PMMInstanceUpdateParams PMM instance update information
type PMMInstanceUpdateParams struct {
	ApiKey *string `json:"apiKey,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// PMMInstancesList defines model for PMMInstancesList.
type PMMInstancesList = []PMMInstance

// UnregisterKubernetesClusterParams Options for removing a kubernetes cluster
type UnregisterKubernetesClusterParams struct {
	// Force Remove the kubernetes cluster even if there are database clusters running.
	Force *bool `json:"force,omitempty"`
}

// UpdateBackupStorageParams Backup storage parameters
type UpdateBackupStorageParams struct {
	AccessKey *string `json:"accessKey,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName *string `json:"bucketName,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      *string `json:"name,omitempty"`
	Region    *string `json:"region,omitempty"`
	SecretKey *string `json:"secretKey,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// CreateBackupStorageJSONRequestBody defines body for CreateBackupStorage for application/json ContentType.
type CreateBackupStorageJSONRequestBody = CreateBackupStorageParams

// UpdateBackupStorageJSONRequestBody defines body for UpdateBackupStorage for application/json ContentType.
type UpdateBackupStorageJSONRequestBody = UpdateBackupStorageParams

// RegisterKubernetesClusterJSONRequestBody defines body for RegisterKubernetesCluster for application/json ContentType.
type RegisterKubernetesClusterJSONRequestBody = CreateKubernetesClusterParams

// UnregisterKubernetesClusterJSONRequestBody defines body for UnregisterKubernetesCluster for application/json ContentType.
type UnregisterKubernetesClusterJSONRequestBody = UnregisterKubernetesClusterParams

// CreateDatabaseClusterRestoreJSONRequestBody defines body for CreateDatabaseClusterRestore for application/json ContentType.
type CreateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestoreWithName

// UpdateDatabaseClusterRestoreJSONRequestBody defines body for UpdateDatabaseClusterRestore for application/json ContentType.
type UpdateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// CreateDatabaseClusterJSONRequestBody defines body for CreateDatabaseCluster for application/json ContentType.
type CreateDatabaseClusterJSONRequestBody = DatabaseClusterWithName

// UpdateDatabaseClusterJSONRequestBody defines body for UpdateDatabaseCluster for application/json ContentType.
type UpdateDatabaseClusterJSONRequestBody = DatabaseCluster

// UpdateDatabaseEngineJSONRequestBody defines body for UpdateDatabaseEngine for application/json ContentType.
type UpdateDatabaseEngineJSONRequestBody = DatabaseEngine

// CreatePMMInstanceJSONRequestBody defines body for CreatePMMInstance for application/json ContentType.
type CreatePMMInstanceJSONRequestBody = PMMInstanceCreateParams

// UpdatePMMInstanceJSONRequestBody defines body for UpdatePMMInstance for application/json ContentType.
type UpdatePMMInstanceJSONRequestBody = PMMInstanceUpdateParams

// AsDatabaseClusterSpecEngineResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu0
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu0() (DatabaseClusterSpecEngineResourcesCpu0, error) {
	var body DatabaseClusterSpecEngineResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu1
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu1() (DatabaseClusterSpecEngineResourcesCpu1, error) {
	var body DatabaseClusterSpecEngineResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory0
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory0() (DatabaseClusterSpecEngineResourcesMemory0, error) {
	var body DatabaseClusterSpecEngineResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory1
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory1() (DatabaseClusterSpecEngineResourcesMemory1, error) {
	var body DatabaseClusterSpecEngineResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineStorageSize0 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize0
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize0() (DatabaseClusterSpecEngineStorageSize0, error) {
	var body DatabaseClusterSpecEngineStorageSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineStorageSize1 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize1
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize1() (DatabaseClusterSpecEngineStorageSize1, error) {
	var body DatabaseClusterSpecEngineStorageSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Storage_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Storage_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits0
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits0() (DatabaseClusterSpecMonitoringResourcesLimits0, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits1
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits1() (DatabaseClusterSpecMonitoringResourcesLimits1, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests0
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests0() (DatabaseClusterSpecMonitoringResourcesRequests0, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests1
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests1() (DatabaseClusterSpecMonitoringResourcesRequests1, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu0
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu0() (DatabaseClusterSpecProxyResourcesCpu0, error) {
	var body DatabaseClusterSpecProxyResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu1
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu1() (DatabaseClusterSpecProxyResourcesCpu1, error) {
	var body DatabaseClusterSpecProxyResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory0
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory0() (DatabaseClusterSpecProxyResourcesMemory0, error) {
	var body DatabaseClusterSpecProxyResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory1
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory1() (DatabaseClusterSpecProxyResourcesMemory1, error) {
	var body DatabaseClusterSpecProxyResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecEngineResourcesCpu0 returns the union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Cpu as a DatabaseClusterWithNameSpecEngineResourcesCpu0
func (t DatabaseClusterWithName_Spec_Engine_Resources_Cpu) AsDatabaseClusterWithNameSpecEngineResourcesCpu0() (DatabaseClusterWithNameSpecEngineResourcesCpu0, error) {
	var body DatabaseClusterWithNameSpecEngineResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecEngineResourcesCpu0 overwrites any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Cpu as the provided DatabaseClusterWithNameSpecEngineResourcesCpu0
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Cpu) FromDatabaseClusterWithNameSpecEngineResourcesCpu0(v DatabaseClusterWithNameSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecEngineResourcesCpu0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterWithNameSpecEngineResourcesCpu0
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Cpu) MergeDatabaseClusterWithNameSpecEngineResourcesCpu0(v DatabaseClusterWithNameSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecEngineResourcesCpu1 returns the union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Cpu as a DatabaseClusterWithNameSpecEngineResourcesCpu1
func (t DatabaseClusterWithName_Spec_Engine_Resources_Cpu) AsDatabaseClusterWithNameSpecEngineResourcesCpu1() (DatabaseClusterWithNameSpecEngineResourcesCpu1, error) {
	var body DatabaseClusterWithNameSpecEngineResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecEngineResourcesCpu1 overwrites any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Cpu as the provided DatabaseClusterWithNameSpecEngineResourcesCpu1
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Cpu) FromDatabaseClusterWithNameSpecEngineResourcesCpu1(v DatabaseClusterWithNameSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecEngineResourcesCpu1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterWithNameSpecEngineResourcesCpu1
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Cpu) MergeDatabaseClusterWithNameSpecEngineResourcesCpu1(v DatabaseClusterWithNameSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Engine_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Engine_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecEngineResourcesMemory0 returns the union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Memory as a DatabaseClusterWithNameSpecEngineResourcesMemory0
func (t DatabaseClusterWithName_Spec_Engine_Resources_Memory) AsDatabaseClusterWithNameSpecEngineResourcesMemory0() (DatabaseClusterWithNameSpecEngineResourcesMemory0, error) {
	var body DatabaseClusterWithNameSpecEngineResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecEngineResourcesMemory0 overwrites any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Memory as the provided DatabaseClusterWithNameSpecEngineResourcesMemory0
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Memory) FromDatabaseClusterWithNameSpecEngineResourcesMemory0(v DatabaseClusterWithNameSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecEngineResourcesMemory0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Memory, using the provided DatabaseClusterWithNameSpecEngineResourcesMemory0
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Memory) MergeDatabaseClusterWithNameSpecEngineResourcesMemory0(v DatabaseClusterWithNameSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecEngineResourcesMemory1 returns the union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Memory as a DatabaseClusterWithNameSpecEngineResourcesMemory1
func (t DatabaseClusterWithName_Spec_Engine_Resources_Memory) AsDatabaseClusterWithNameSpecEngineResourcesMemory1() (DatabaseClusterWithNameSpecEngineResourcesMemory1, error) {
	var body DatabaseClusterWithNameSpecEngineResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecEngineResourcesMemory1 overwrites any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Memory as the provided DatabaseClusterWithNameSpecEngineResourcesMemory1
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Memory) FromDatabaseClusterWithNameSpecEngineResourcesMemory1(v DatabaseClusterWithNameSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecEngineResourcesMemory1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Engine_Resources_Memory, using the provided DatabaseClusterWithNameSpecEngineResourcesMemory1
func (t *DatabaseClusterWithName_Spec_Engine_Resources_Memory) MergeDatabaseClusterWithNameSpecEngineResourcesMemory1(v DatabaseClusterWithNameSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Engine_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Engine_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecEngineStorageSize0 returns the union data inside the DatabaseClusterWithName_Spec_Engine_Storage_Size as a DatabaseClusterWithNameSpecEngineStorageSize0
func (t DatabaseClusterWithName_Spec_Engine_Storage_Size) AsDatabaseClusterWithNameSpecEngineStorageSize0() (DatabaseClusterWithNameSpecEngineStorageSize0, error) {
	var body DatabaseClusterWithNameSpecEngineStorageSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecEngineStorageSize0 overwrites any union data inside the DatabaseClusterWithName_Spec_Engine_Storage_Size as the provided DatabaseClusterWithNameSpecEngineStorageSize0
func (t *DatabaseClusterWithName_Spec_Engine_Storage_Size) FromDatabaseClusterWithNameSpecEngineStorageSize0(v DatabaseClusterWithNameSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecEngineStorageSize0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Engine_Storage_Size, using the provided DatabaseClusterWithNameSpecEngineStorageSize0
func (t *DatabaseClusterWithName_Spec_Engine_Storage_Size) MergeDatabaseClusterWithNameSpecEngineStorageSize0(v DatabaseClusterWithNameSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecEngineStorageSize1 returns the union data inside the DatabaseClusterWithName_Spec_Engine_Storage_Size as a DatabaseClusterWithNameSpecEngineStorageSize1
func (t DatabaseClusterWithName_Spec_Engine_Storage_Size) AsDatabaseClusterWithNameSpecEngineStorageSize1() (DatabaseClusterWithNameSpecEngineStorageSize1, error) {
	var body DatabaseClusterWithNameSpecEngineStorageSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecEngineStorageSize1 overwrites any union data inside the DatabaseClusterWithName_Spec_Engine_Storage_Size as the provided DatabaseClusterWithNameSpecEngineStorageSize1
func (t *DatabaseClusterWithName_Spec_Engine_Storage_Size) FromDatabaseClusterWithNameSpecEngineStorageSize1(v DatabaseClusterWithNameSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecEngineStorageSize1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Engine_Storage_Size, using the provided DatabaseClusterWithNameSpecEngineStorageSize1
func (t *DatabaseClusterWithName_Spec_Engine_Storage_Size) MergeDatabaseClusterWithNameSpecEngineStorageSize1(v DatabaseClusterWithNameSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Engine_Storage_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Engine_Storage_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecMonitoringResourcesLimits0 returns the union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterWithNameSpecMonitoringResourcesLimits0
func (t DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterWithNameSpecMonitoringResourcesLimits0() (DatabaseClusterWithNameSpecMonitoringResourcesLimits0, error) {
	var body DatabaseClusterWithNameSpecMonitoringResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecMonitoringResourcesLimits0 overwrites any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterWithNameSpecMonitoringResourcesLimits0
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterWithNameSpecMonitoringResourcesLimits0(v DatabaseClusterWithNameSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecMonitoringResourcesLimits0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterWithNameSpecMonitoringResourcesLimits0
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterWithNameSpecMonitoringResourcesLimits0(v DatabaseClusterWithNameSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecMonitoringResourcesLimits1 returns the union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterWithNameSpecMonitoringResourcesLimits1
func (t DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterWithNameSpecMonitoringResourcesLimits1() (DatabaseClusterWithNameSpecMonitoringResourcesLimits1, error) {
	var body DatabaseClusterWithNameSpecMonitoringResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecMonitoringResourcesLimits1 overwrites any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterWithNameSpecMonitoringResourcesLimits1
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterWithNameSpecMonitoringResourcesLimits1(v DatabaseClusterWithNameSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecMonitoringResourcesLimits1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterWithNameSpecMonitoringResourcesLimits1
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterWithNameSpecMonitoringResourcesLimits1(v DatabaseClusterWithNameSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecMonitoringResourcesRequests0 returns the union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterWithNameSpecMonitoringResourcesRequests0
func (t DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterWithNameSpecMonitoringResourcesRequests0() (DatabaseClusterWithNameSpecMonitoringResourcesRequests0, error) {
	var body DatabaseClusterWithNameSpecMonitoringResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecMonitoringResourcesRequests0 overwrites any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterWithNameSpecMonitoringResourcesRequests0
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterWithNameSpecMonitoringResourcesRequests0(v DatabaseClusterWithNameSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecMonitoringResourcesRequests0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterWithNameSpecMonitoringResourcesRequests0
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterWithNameSpecMonitoringResourcesRequests0(v DatabaseClusterWithNameSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecMonitoringResourcesRequests1 returns the union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterWithNameSpecMonitoringResourcesRequests1
func (t DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterWithNameSpecMonitoringResourcesRequests1() (DatabaseClusterWithNameSpecMonitoringResourcesRequests1, error) {
	var body DatabaseClusterWithNameSpecMonitoringResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecMonitoringResourcesRequests1 overwrites any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterWithNameSpecMonitoringResourcesRequests1
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterWithNameSpecMonitoringResourcesRequests1(v DatabaseClusterWithNameSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecMonitoringResourcesRequests1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterWithNameSpecMonitoringResourcesRequests1
func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterWithNameSpecMonitoringResourcesRequests1(v DatabaseClusterWithNameSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Monitoring_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecProxyResourcesCpu0 returns the union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Cpu as a DatabaseClusterWithNameSpecProxyResourcesCpu0
func (t DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) AsDatabaseClusterWithNameSpecProxyResourcesCpu0() (DatabaseClusterWithNameSpecProxyResourcesCpu0, error) {
	var body DatabaseClusterWithNameSpecProxyResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecProxyResourcesCpu0 overwrites any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterWithNameSpecProxyResourcesCpu0
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) FromDatabaseClusterWithNameSpecProxyResourcesCpu0(v DatabaseClusterWithNameSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecProxyResourcesCpu0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterWithNameSpecProxyResourcesCpu0
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterWithNameSpecProxyResourcesCpu0(v DatabaseClusterWithNameSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecProxyResourcesCpu1 returns the union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Cpu as a DatabaseClusterWithNameSpecProxyResourcesCpu1
func (t DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) AsDatabaseClusterWithNameSpecProxyResourcesCpu1() (DatabaseClusterWithNameSpecProxyResourcesCpu1, error) {
	var body DatabaseClusterWithNameSpecProxyResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecProxyResourcesCpu1 overwrites any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterWithNameSpecProxyResourcesCpu1
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) FromDatabaseClusterWithNameSpecProxyResourcesCpu1(v DatabaseClusterWithNameSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecProxyResourcesCpu1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterWithNameSpecProxyResourcesCpu1
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterWithNameSpecProxyResourcesCpu1(v DatabaseClusterWithNameSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterWithNameSpecProxyResourcesMemory0 returns the union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Memory as a DatabaseClusterWithNameSpecProxyResourcesMemory0
func (t DatabaseClusterWithName_Spec_Proxy_Resources_Memory) AsDatabaseClusterWithNameSpecProxyResourcesMemory0() (DatabaseClusterWithNameSpecProxyResourcesMemory0, error) {
	var body DatabaseClusterWithNameSpecProxyResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecProxyResourcesMemory0 overwrites any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Memory as the provided DatabaseClusterWithNameSpecProxyResourcesMemory0
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Memory) FromDatabaseClusterWithNameSpecProxyResourcesMemory0(v DatabaseClusterWithNameSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecProxyResourcesMemory0 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterWithNameSpecProxyResourcesMemory0
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Memory) MergeDatabaseClusterWithNameSpecProxyResourcesMemory0(v DatabaseClusterWithNameSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterWithNameSpecProxyResourcesMemory1 returns the union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Memory as a DatabaseClusterWithNameSpecProxyResourcesMemory1
func (t DatabaseClusterWithName_Spec_Proxy_Resources_Memory) AsDatabaseClusterWithNameSpecProxyResourcesMemory1() (DatabaseClusterWithNameSpecProxyResourcesMemory1, error) {
	var body DatabaseClusterWithNameSpecProxyResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterWithNameSpecProxyResourcesMemory1 overwrites any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Memory as the provided DatabaseClusterWithNameSpecProxyResourcesMemory1
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Memory) FromDatabaseClusterWithNameSpecProxyResourcesMemory1(v DatabaseClusterWithNameSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterWithNameSpecProxyResourcesMemory1 performs a merge with any union data inside the DatabaseClusterWithName_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterWithNameSpecProxyResourcesMemory1
func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Memory) MergeDatabaseClusterWithNameSpecProxyResourcesMemory1(v DatabaseClusterWithNameSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseClusterWithName_Spec_Proxy_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseClusterWithName_Spec_Proxy_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of the created backup storages
	// (GET /backup-storages)
	ListBackupStorages(ctx echo.Context) error
	// Create a new backup storage object
	// (POST /backup-storages)
	CreateBackupStorage(ctx echo.Context) error
	// Delete the specified backup storage
	// (DELETE /backup-storages/{backup-storage-id})
	DeleteBackupStorage(ctx echo.Context, backupStorageId string) error
	// Get the specified backup storage
	// (GET /backup-storages/{backup-storage-id})
	GetBackupStorage(ctx echo.Context, backupStorageId string) error
	// Partial update of the specified backup storage
	// (PATCH /backup-storages/{backup-storage-id})
	UpdateBackupStorage(ctx echo.Context, backupStorageId string) error
	// List of the registered kubernetes clusters
	// (GET /kubernetes)
	ListKubernetesClusters(ctx echo.Context) error
	// Register kubernetes cluster in Everest
	// (POST /kubernetes)
	RegisterKubernetesCluster(ctx echo.Context) error
	// Remove the specified kubernetes cluster from Everest
	// (DELETE /kubernetes/{kubernetes-id})
	UnregisterKubernetesCluster(ctx echo.Context, kubernetesId string) error
	// Get the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id})
	GetKubernetesCluster(ctx echo.Context, kubernetesId string) error
	// List of the created database cluster restores on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-cluster-restores)
	ListDatabaseClusterRestores(ctx echo.Context, kubernetesId string) error
	// Create a database cluster restore on the specified kubernetes cluster
	// (POST /kubernetes/{kubernetes-id}/database-cluster-restores)
	CreateDatabaseClusterRestore(ctx echo.Context, kubernetesId string) error
	// Delete the specified cluster restore on the specified kubernetes cluster
	// (DELETE /kubernetes/{kubernetes-id}/database-cluster-restores/{name})
	DeleteDatabaseClusterRestore(ctx echo.Context, kubernetesId string, name string) error
	// Returns the specified cluster restore on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-cluster-restores/{name})
	GetDatabaseClusterRestore(ctx echo.Context, kubernetesId string, name string) error
	// Replace the specified cluster restore on the specified kubernetes cluster
	// (PUT /kubernetes/{kubernetes-id}/database-cluster-restores/{name})
	UpdateDatabaseClusterRestore(ctx echo.Context, kubernetesId string, name string) error
	// List of the created database clusters on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-clusters)
	ListDatabaseClusters(ctx echo.Context, kubernetesId string) error
	// Create a database cluster on the specified kubernetes cluster
	// (POST /kubernetes/{kubernetes-id}/database-clusters)
	CreateDatabaseCluster(ctx echo.Context, kubernetesId string) error
	// Delete the specified database cluster on the specified kubernetes cluster
	// (DELETE /kubernetes/{kubernetes-id}/database-clusters/{name})
	DeleteDatabaseCluster(ctx echo.Context, kubernetesId string, name string) error
	// Get the specified database cluster on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-clusters/{name})
	GetDatabaseCluster(ctx echo.Context, kubernetesId string, name string) error
	// Replace the specified database cluster on the specified kubernetes cluster
	// (PUT /kubernetes/{kubernetes-id}/database-clusters/{name})
	UpdateDatabaseCluster(ctx echo.Context, kubernetesId string, name string) error
	// Get the specified database cluster credentials on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-clusters/{name}/credentials)
	GetDatabaseClusterCredentials(ctx echo.Context, kubernetesId string, name string) error
	// List of the available database engines on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-engines)
	ListDatabaseEngines(ctx echo.Context, kubernetesId string) error
	// Get the specified database engine on the specified kubernetes cluster
	// (GET /kubernetes/{kubernetes-id}/database-engines/{name})
	GetDatabaseEngine(ctx echo.Context, kubernetesId string, name string) error
	// Update the specified database engine on the specified kubernetes cluster
	// (PUT /kubernetes/{kubernetes-id}/database-engines/{name})
	UpdateDatabaseEngine(ctx echo.Context, kubernetesId string, name string) error
	// List of the created PMM instances
	// (GET /pmm-instances)
	ListPMMInstances(ctx echo.Context) error
	// Create a new PMM instance object
	// (POST /pmm-instances)
	CreatePMMInstance(ctx echo.Context) error
	// Delete the specified PMM instance
	// (DELETE /pmm-instances/{pmm-instance-id})
	DeletePMMInstance(ctx echo.Context, pmmInstanceId string) error
	// Get the specified PMM instance
	// (GET /pmm-instances/{pmm-instance-id})
	GetPMMInstance(ctx echo.Context, pmmInstanceId string) error
	// Update the specified PMM instance
	// (PATCH /pmm-instances/{pmm-instance-id})
	UpdatePMMInstance(ctx echo.Context, pmmInstanceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListBackupStorages converts echo context to params.
func (w *ServerInterfaceWrapper) ListBackupStorages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListBackupStorages(ctx)
	return err
}

// CreateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBackupStorage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBackupStorage(ctx)
	return err
}

// DeleteBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "backup-storage-id" -------------
	var backupStorageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "backup-storage-id", runtime.ParamLocationPath, ctx.Param("backup-storage-id"), &backupStorageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter backup-storage-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBackupStorage(ctx, backupStorageId)
	return err
}

// GetBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "backup-storage-id" -------------
	var backupStorageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "backup-storage-id", runtime.ParamLocationPath, ctx.Param("backup-storage-id"), &backupStorageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter backup-storage-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBackupStorage(ctx, backupStorageId)
	return err
}

// UpdateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "backup-storage-id" -------------
	var backupStorageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "backup-storage-id", runtime.ParamLocationPath, ctx.Param("backup-storage-id"), &backupStorageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter backup-storage-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBackupStorage(ctx, backupStorageId)
	return err
}

// ListKubernetesClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListKubernetesClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListKubernetesClusters(ctx)
	return err
}

// RegisterKubernetesCluster converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterKubernetesCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterKubernetesCluster(ctx)
	return err
}

// UnregisterKubernetesCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UnregisterKubernetesCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnregisterKubernetesCluster(ctx, kubernetesId)
	return err
}

// GetKubernetesCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetKubernetesCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKubernetesCluster(ctx, kubernetesId)
	return err
}

// ListDatabaseClusterRestores converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusterRestores(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusterRestores(ctx, kubernetesId)
	return err
}

// CreateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseClusterRestore(ctx, kubernetesId)
	return err
}

// DeleteDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseClusterRestore(ctx, kubernetesId, name)
	return err
}

// GetDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterRestore(ctx, kubernetesId, name)
	return err
}

// UpdateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseClusterRestore(ctx, kubernetesId, name)
	return err
}

// ListDatabaseClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusters(ctx, kubernetesId)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseCluster(ctx, kubernetesId)
	return err
}

// DeleteDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseCluster(ctx, kubernetesId, name)
	return err
}

// GetDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseCluster(ctx, kubernetesId, name)
	return err
}

// UpdateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseCluster(ctx, kubernetesId, name)
	return err
}

// GetDatabaseClusterCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterCredentials(ctx, kubernetesId, name)
	return err
}

// ListDatabaseEngines converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseEngines(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseEngines(ctx, kubernetesId)
	return err
}

// GetDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseEngine(ctx, kubernetesId, name)
	return err
}

// UpdateDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetes-id" -------------
	var kubernetesId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetes-id", runtime.ParamLocationPath, ctx.Param("kubernetes-id"), &kubernetesId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetes-id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseEngine(ctx, kubernetesId, name)
	return err
}

// ListPMMInstances converts echo context to params.
func (w *ServerInterfaceWrapper) ListPMMInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPMMInstances(ctx)
	return err
}

// CreatePMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePMMInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePMMInstance(ctx)
	return err
}

// DeletePMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePMMInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pmm-instance-id" -------------
	var pmmInstanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pmm-instance-id", runtime.ParamLocationPath, ctx.Param("pmm-instance-id"), &pmmInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pmm-instance-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePMMInstance(ctx, pmmInstanceId)
	return err
}

// GetPMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetPMMInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pmm-instance-id" -------------
	var pmmInstanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pmm-instance-id", runtime.ParamLocationPath, ctx.Param("pmm-instance-id"), &pmmInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pmm-instance-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPMMInstance(ctx, pmmInstanceId)
	return err
}

// UpdatePMMInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePMMInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pmm-instance-id" -------------
	var pmmInstanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pmm-instance-id", runtime.ParamLocationPath, ctx.Param("pmm-instance-id"), &pmmInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pmm-instance-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePMMInstance(ctx, pmmInstanceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/backup-storages", wrapper.ListBackupStorages)
	router.POST(baseURL+"/backup-storages", wrapper.CreateBackupStorage)
	router.DELETE(baseURL+"/backup-storages/:backup-storage-id", wrapper.DeleteBackupStorage)
	router.GET(baseURL+"/backup-storages/:backup-storage-id", wrapper.GetBackupStorage)
	router.PATCH(baseURL+"/backup-storages/:backup-storage-id", wrapper.UpdateBackupStorage)
	router.GET(baseURL+"/kubernetes", wrapper.ListKubernetesClusters)
	router.POST(baseURL+"/kubernetes", wrapper.RegisterKubernetesCluster)
	router.DELETE(baseURL+"/kubernetes/:kubernetes-id", wrapper.UnregisterKubernetesCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id", wrapper.GetKubernetesCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores", wrapper.ListDatabaseClusterRestores)
	router.POST(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores", wrapper.CreateDatabaseClusterRestore)
	router.DELETE(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores/:name", wrapper.DeleteDatabaseClusterRestore)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores/:name", wrapper.GetDatabaseClusterRestore)
	router.PUT(baseURL+"/kubernetes/:kubernetes-id/database-cluster-restores/:name", wrapper.UpdateDatabaseClusterRestore)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-clusters", wrapper.ListDatabaseClusters)
	router.POST(baseURL+"/kubernetes/:kubernetes-id/database-clusters", wrapper.CreateDatabaseCluster)
	router.DELETE(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name", wrapper.DeleteDatabaseCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name", wrapper.GetDatabaseCluster)
	router.PUT(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name", wrapper.UpdateDatabaseCluster)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-clusters/:name/credentials", wrapper.GetDatabaseClusterCredentials)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-engines", wrapper.ListDatabaseEngines)
	router.GET(baseURL+"/kubernetes/:kubernetes-id/database-engines/:name", wrapper.GetDatabaseEngine)
	router.PUT(baseURL+"/kubernetes/:kubernetes-id/database-engines/:name", wrapper.UpdateDatabaseEngine)
	router.GET(baseURL+"/pmm-instances", wrapper.ListPMMInstances)
	router.POST(baseURL+"/pmm-instances", wrapper.CreatePMMInstance)
	router.DELETE(baseURL+"/pmm-instances/:pmm-instance-id", wrapper.DeletePMMInstance)
	router.GET(baseURL+"/pmm-instances/:pmm-instance-id", wrapper.GetPMMInstance)
	router.PATCH(baseURL+"/pmm-instances/:pmm-instance-id", wrapper.UpdatePMMInstance)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"hVV+bXbiq7WdLFogXt7+fwAAAP//UrF6aBW3AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
