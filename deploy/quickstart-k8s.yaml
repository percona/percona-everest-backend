apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: everest
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  # ingressClassName: nginx-example
  rules:
  - http:
      paths:
      - path: /zitadel(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: everest-zitadel
            port:
              number: 8050
      - path: /(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: everest
            port:
              number: 8081
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: percona-everest
spec:
  serviceName: everest
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: percona-everest-backend
      app.kubernetes.io/component: everest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: percona-everest-backend
        app.kubernetes.io/component: everest
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: everest
                app.kubernetes.io/name: percona-everest-backend
            topologyKey: kubernetes.io/hostname
      containers:
        - name: everest
          image: percona/percona-everest:v0.3.0
          env:
            - name: DSN
              value: postgres://admin:pwd@localhost:5432/postgres?sslmode=disable
            - name: HTTP_PORT
              value: '8081'
          ports:
            - containerPort: 8081
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 300
            periodSeconds: 15
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 20Mi
        - name: postgres
          image: postgres:15
          env:
            - name: POSTGRES_USER
              value: admin
            - name: POSTGRES_PASSWORD
              value: pwd
            - name: PGDATA
              value: /pgdata/pg15
          resources:
            limits:
              cpu: 200m
              memory: 1G
            requests:
              cpu: 100m
              memory: 500Mi
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - admin
          volumeMounts:
          - mountPath: /pgdata
            name: postgres-data
          ports:
            - containerPort: 5432
        - name: zitadel
          image: ghcr.io/zitadel/zitadel:v2.38.1
          env:
            - name: ZITADEL_DATABASE_COCKROACH_HOST
              value: localhost
            - name: ZITADEL_EXTERNALSECURE
              value: 'false'
            - name: ZITADEL_PORT
              value: '8050'
          args: ["start-from-init", "--masterkey", "MasterkeyNeedsToHave32Characters", "--tlsMode", "disabled"]
          resources:
            limits:
              cpu: 200m
              memory: 1G
            requests:
              cpu: 100m
              memory: 500Mi
          ports:
            - containerPort: 8050
        - name: crdb
          image: cockroachdb/cockroach:latest-v22.2
          args: ["start-single-node", "--insecure"]
          resources:
            limits:
              cpu: 200m
              memory: 1G
            requests:
              cpu: 100m
              memory: 500Mi
          readinessProbe:
            httpGet:
              path: /health?ready=1
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /crdb-data
            name: crdb-data
          ports:
            - containerPort: 8080
            - containerPort: 26257

  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: crdb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: everest
  labels:
    app.kubernetes.io/name: percona-everest-backend
    app.kubernetes.io/component: everest
spec:
  selector:
    app.kubernetes.io/component: everest
    app.kubernetes.io/name: percona-everest-backend
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: everest-postgresql
  labels:
    app.kubernetes.io/name: percona-everest-backend
    app.kubernetes.io/component: everest
spec:
  selector:
    app.kubernetes.io/component: everest
    app.kubernetes.io/name: percona-everest-backend
  clusterIP: "None"
  ports:
    - protocol: TCP
      port: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: everest-zitadel
  labels:
    app.kubernetes.io/name: percona-everest-backend
    app.kubernetes.io/component: everest
spec:
  selector:
    app.kubernetes.io/name: percona-everest-backend
    app.kubernetes.io/component: everest
  clusterIP: "None"
  ports:
    - protocol: TCP
      port: 8050
