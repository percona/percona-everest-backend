openapi: 3.0.2
servers:
  - url: /v1
info:
  version: 1.0.0
  title: Percona Everest schema
tags:
  - name: k8s
    description: Everything related to the Kubernetes Clusters
  - name: databaseCluster
    description: Everything related to the Database Clusters
  - name: databaseEngine
    description: Everything related to the Database Engines
  - name: databaseClusterRestore
    description: Everything related to the Database Cluster Restores
  - name: backupStorage
    description: Everything related to the Backup storage

paths:
  '/kubernetes':
    post:
      tags:
        - k8s
      summary: Register kubernetes cluster in Everest
      description: Register kubernetes cluster in Everest
      operationId: registerKubernetesCluster
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KubernetesCluster'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The kubernetes cluster object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKubernetesClusterParams'
    get:
      tags:
        - k8s
      summary: List of the registered kubernetes clusters
      description: List of the registered kubernetes clusters
      operationId: listKubernetesClusters
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KubernetesClusterList'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}':
    get:
      tags:
        - k8s
      summary: Get the specified kubernetes cluster
      description: Get the specified kubernetes cluster
      operationId: getKubernetesCluster
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KubernetesCluster'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}/database-clusters':
    post:
      tags:
        - databaseCluster
      summary: Create a database cluster on the specified kubernetes cluster
      description: Create a database cluster on the specified kubernetes cluster
      operationId: createDatabaseCluster
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCluster'
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCluster'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCluster'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The database cluster object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseCluster'
    get:
      tags:
        - databaseCluster
      summary: List of the created database clusters on the specified kubernetes cluster
      description: List of the created database clusters on the specified kubernetes cluster
      operationId: listDatabaseClusters
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterList'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}/database-clusters/{name}':
    get:
      tags:
        - databaseCluster
      summary: Get the specified database cluster on the specified kubernetes cluster
      description: Get the specified database cluster on the specified kubernetes cluster
      operationId: getDatabaseCluster
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCluster'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - databaseCluster
      summary: Replace the specified database cluster on the specified kubernetes cluster
      description: Replace the specified database cluster on the specified kubernetes cluster
      operationId: updateDatabaseCluster
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCluster'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The database cluster object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseCluster'
    delete:
      tags:
        - databaseCluster
      summary: Delete the specified database cluster on the specified kubernetes cluster
      description: Delete the specified database cluster on the specified kubernetes cluster
      operationId: deleteDatabaseCluster
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}/database-engines':
    get:
      tags:
        - databaseEngine
      summary: List of the available database engines on the specified kubernetes cluster
      description: List of available database engines on the specified kubernetes cluster
      operationId: listDatabaseEngines
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseEngineList'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}/database-engines/{name}':
    get:
      tags:
        - databaseEngine
      summary: Get the specified database engine on the specified kubernetes cluster
      description: Get the specified database engine on the specified kubernetes cluster
      operationId: getDatabaseEngine
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database engine
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseEngineList'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - databaseEngine
      summary: Update the specified database engine on the specified kubernetes cluster
      description: Update the specified database engine on the specified kubernetes cluster
      operationId: updateDatabaseEngine
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database engine
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseEngine'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}/database-cluster-restores':
    post:
      tags:
        - databaseClusterRestore
      summary: Create a database cluster restore on the specified kubernetes cluster
      description: Create a database cluster restore on the specified kubernetes cluster
      operationId: createDatabaseClusterRestore
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestore'
        '201':
          description: Created success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestore'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestore'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The database cluster restore object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseClusterRestore'
    get:
      tags:
        - databaseClusterRestore
      summary: List of the created database cluster restores on the specified kubernetes cluster
      description: List of the created database cluster restores on the specified kubernetes cluster
      operationId: listDatabaseClusterRestores
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestoreList'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/kubernetes/{kubernetes-id}/database-cluster-restores/{name}':
    get:
      tags:
        - databaseClusterRestore
      summary: Returns the specified cluster restore on the specified kubernetes cluster
      description: Returns the specified cluster restore on the specified kubernetes cluster
      operationId: getDatabaseClusterRestore
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database cluster restore. Can be found under Metadata["name"] of the DatabaseClusterRestore object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestore'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - databaseClusterRestore
      summary: Replace the specified cluster restore on the specified kubernetes cluster
      description: Replace the specified cluster restore on the specified kubernetes cluster
      operationId: updateDatabaseClusterRestore
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database cluster restore. Can be found under Metadata["name"] of the DatabaseClusterRestore object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestore'
        '201':
          description: Created successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseClusterRestore'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The database cluster restore object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseClusterRestore'
    delete:
      tags:
        - databaseClusterRestore
      summary: Delete the specified cluster restore on the specified kubernetes cluster
      description: Delete the specified cluster restore on the specified kubernetes cluster
      operationId: deleteDatabaseClusterRestore
      parameters:
        - name: kubernetes-id
          in: path
          description: Id of the kubernetes cluster
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the database cluster restore. Can be found under Metadata["name"] of the DatabaseClusterRestore object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/backup-storages':
    post:
      tags:
        - backupStorage
      summary: Create a new backup storage object
      description: Create a new backup storage object
      operationId: createBackupStorage
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupStorage'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The backup storage object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackupStorageParams'
    get:
      tags:
        - backupStorage
      summary: List of the created backup storages
      description: List of the created backup storages
      operationId: listBackupStorages
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupStoragesList'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/backup-storages/{backup-storage-id}':
    get:
      tags:
        - backupStorage
      summary: Get the specified backup storage
      description: Get the specified backup storage
      operationId: getBackupStorage
      parameters:
        - name: backup-storage-id
          in: path
          description: Id of the backup storage
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupStorage'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - backupStorage
      summary: Partial update of the specified backup storage
      description: Partial update of the specified backup storage. Updates only the specified fields.
      operationId: updateBackupStorage
      parameters:
        - name: backup-storage-id
          in: path
          description: Id of the backup storage
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupStorage'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The backup storage params. Only the specified fields will be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBackupStorageParams'
    delete:
      tags:
        - backupStorage
      summary: Delete the specified backup storage
      description: Delete the specified backup storage
      operationId: deleteBackupStorage
      parameters:
        - name: backup-storage-id
          in: path
          description: Id of the backup storage
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      description: Error response
      properties:
        message:
          type: string
    CreateBackupStorageParams:
      type: object
      description: Backup storage parameters
      properties:
        name:
          description: A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
          type: string
          example: aws-dev
        type:
          type: string
          enum:
            - s3
            - azure
            - gcs
        bucketName:
          type: string
          description: The cloud storage bucket/container name
        accessKey:
          type: string
        secretKey:
          type: string
        url:
          type: string
        region:
          type: string
      required:
        - name
        - bucketName
        - accessKey
        - secretKey
        - region
        - type
    UpdateBackupStorageParams:
      type: object
      description: Backup storage parameters
      properties:
        name:
          type: string
          description: A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
          example: aws-dev
        bucketName:
          type: string
          description: The cloud storage bucket/container name
        accessKey:
          type: string
        secretKey:
          type: string
        url:
          type: string
        region:
          type: string
    BackupStorage:
      type: object
      description: Backup storage information
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - s3
            - azure
            - gcs
        name:
          type: string
        bucketName:
          type: string
        url:
          type: string
        region:
          type: string
      required:
        - id
        - name
        - bucketName
        - region
        - type
    BackupStoragesList:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/BackupStorage'
    CreateKubernetesClusterParams:
      type: object
      description: kubernetes object
      properties:
        name:
          type: string
          example: minikube
        kubeconfig:
          type: string
        namespace:
          type: string
          default: percona-everest
      required:
        - name
        - kubeconfig
    KubernetesCluster:
      type: object
      description: kubernetes object
      properties:
        id:
          type: string
        name:
          type: string
          example: minikube
      required:
        - id
        - name
    KubernetesClusterList:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/KubernetesCluster'
    DatabaseClusterList:
      description: DatabaseClusterList is an object that contains the list of the existing database clusters.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        items:
          type: array
          $ref: '#/components/schemas/DatabaseCluster'
        metadata:
          type: object
      type: object
    DatabaseEngineList:
      description: DatabaseEngineList is an object that contains the list of the existing database engines.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        items:
          type: array
          $ref: '#/components/schemas/DatabaseEngine'
        metadata:
          type: object
      type: object
    DatabaseClusterRestoreList:
      description: DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        items:
          type: array
          $ref: '#/components/schemas/DatabaseClusterRestore'
        metadata:
          type: object
      type: object
    SizeLimit:
      anyOf:
        - $ref: '#/components/schemas/Integer'
        - $ref: '#/components/schemas/String'
      description: 'sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
      x-kubernetes-int-or-string: true
    Integer:
      type: integer
    String:
      type: string

    # -------------------------
    # DatabaseEngine spec is imported from the everest operator,
    # please do not edit the definition below manually
    # -------------------------
    DatabaseEngine:
      description: DatabaseEngine is the Schema for the databaseengines API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DatabaseEngineSpec is a spec for a database engine.
          properties:
            allowedVersions:
              items:
                type: string
              type: array
            type:
              description: EngineType stands for the supported database engines.
                Right now it's only pxc and psmdb. However, it can be ps, pg and
                any other source.
              type: string
          required:
          - type
          type: object
        status:
          description: DatabaseEngineStatus defines the observed state of DatabaseEngine.
          properties:
            availableVersions:
              description: Versions struct represents available versions of database
                engine components.
              properties:
                backup:
                  additionalProperties:
                    description: Component contains information of the database
                      engine component. Database Engine component can be database
                      engine, database proxy or tools image path.
                    properties:
                      critical:
                        type: boolean
                      imageHash:
                        type: string
                      imagePath:
                        type: string
                      status:
                        type: string
                    type: object
                  type: object
                engine:
                  additionalProperties:
                    description: Component contains information of the database
                      engine component. Database Engine component can be database
                      engine, database proxy or tools image path.
                    properties:
                      critical:
                        type: boolean
                      imageHash:
                        type: string
                      imagePath:
                        type: string
                      status:
                        type: string
                    type: object
                  type: object
                proxy:
                  additionalProperties:
                    additionalProperties:
                      description: Component contains information of the database
                        engine component. Database Engine component can be database
                        engine, database proxy or tools image path.
                      properties:
                        critical:
                          type: boolean
                        imageHash:
                          type: string
                        imagePath:
                          type: string
                        status:
                          type: string
                      type: object
                    type: object
                  type: object
                tools:
                  additionalProperties:
                    additionalProperties:
                      description: Component contains information of the database
                        engine component. Database Engine component can be database
                        engine, database proxy or tools image path.
                      properties:
                        critical:
                          type: boolean
                        imageHash:
                          type: string
                        imagePath:
                          type: string
                        status:
                          type: string
                      type: object
                    type: object
                  type: object
              type: object
            operatorVersion:
              type: string
            status:
              description: EngineState represents state of engine in a k8s cluster.
              type: string
          type: object
      type: object


    # -------------------------
    # DatabaseCluster spec is imported from the everest operator,
    # please do not edit the definition below manually
    # -------------------------
    DatabaseCluster:
      description: DatabaseCluster is the Schema for the databases API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DatabaseSpec defines the desired state of Database.
          properties:
            backup:
              description: Backup contains backup settings.
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  type: object
                containerSecurityContext:
                  description: SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
                  properties:
                    allowPrivilegeEscalation:
                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                      type: boolean
                    capabilities:
                      description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                      properties:
                        add:
                          description: Added capabilities
                          items:
                            description: Capability represent POSIX capabilities type
                            type: string
                          type: array
                        drop:
                          description: Removed capabilities
                          items:
                            description: Capability represent POSIX capabilities type
                            type: string
                          type: array
                      type: object
                    privileged:
                      description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                      type: boolean
                    procMount:
                      description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                      type: string
                    readOnlyRootFilesystem:
                      description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                      type: boolean
                    runAsGroup:
                      description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                      format: int64
                      type: integer
                    runAsNonRoot:
                      description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                      type: boolean
                    runAsUser:
                      description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                      format: int64
                      type: integer
                    seLinuxOptions:
                      description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                      properties:
                        level:
                          description: Level is SELinux level label that applies to the container.
                          type: string
                        role:
                          description: Role is a SELinux role label that applies to the container.
                          type: string
                        type:
                          description: Type is a SELinux type label that applies to the container.
                          type: string
                        user:
                          description: User is a SELinux user label that applies to the container.
                          type: string
                      type: object
                    seccompProfile:
                      description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                      properties:
                        localhostProfile:
                          description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                          type: string
                        type:
                          description: "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                          type: string
                      required:
                        - type
                      type: object
                    windowsOptions:
                      description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                      properties:
                        gmsaCredentialSpec:
                          description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                          type: string
                        gmsaCredentialSpecName:
                          description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                          type: string
                        hostProcess:
                          description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                          type: boolean
                        runAsUserName:
                          description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                          type: string
                      type: object
                  type: object
                enabled:
                  type: boolean
                image:
                  type: string
                imagePullPolicy:
                  description: PullPolicy describes a policy for if/when to pull a container image
                  type: string
                imagePullSecrets:
                  items:
                    description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  type: array
                initImage:
                  type: string
                labels:
                  additionalProperties:
                    type: string
                  type: object
                resources:
                  description: ResourceRequirements describes the compute resource requirements.
                  properties:
                    claims:
                      description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers."
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                            type: string
                        required:
                          - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                        - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties: false
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                    requests:
                      additionalProperties: false
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                  type: object
                schedule:
                  items:
                    description: BackupSchedule represents set of settings to configure backup schedule.
                    properties:
                      compressionLevel:
                        type: integer
                      compressionType:
                        type: string
                      enabled:
                        type: boolean
                      keep:
                        type: integer
                      name:
                        type: string
                      schedule:
                        type: string
                      storageName:
                        type: string
                    type: object
                  type: array
                serviceAccountName:
                  type: string
                storages:
                  additionalProperties:
                    description: BackupStorageSpec represents set of settings to configure backup storage.
                    properties:
                      affinity:
                        description: Affinity is a group of affinity scheduling rules.
                        properties:
                          nodeAffinity:
                            description: Describes node affinity scheduling rules for the pod.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated with the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements by node's labels.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements by node's fields.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    weight:
                                      description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                    - preference
                                    - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements by node's labels.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements by node's fields.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    type: array
                                required:
                                  - nodeSelectorTerms
                                type: object
                                x-kubernetes-map-type: atomic
                            type: object
                          podAffinity:
                            description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term, associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                          type: string
                                      required:
                                        - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                    - podAffinityTerm
                                    - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources, in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                    - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term, associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                          type: string
                                      required:
                                        - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                    - podAffinityTerm
                                    - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources, in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                    - topologyKey
                                  type: object
                                type: array
                            type: object
                        type: object
                      annotations:
                        additionalProperties:
                          type: string
                        type: object
                      containerSecurityContext:
                        description: SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
                        properties:
                          allowPrivilegeEscalation:
                            description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                            type: boolean
                          capabilities:
                            description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                            properties:
                              add:
                                description: Added capabilities
                                items:
                                  description: Capability represent POSIX capabilities type
                                  type: string
                                type: array
                              drop:
                                description: Removed capabilities
                                items:
                                  description: Capability represent POSIX capabilities type
                                  type: string
                                type: array
                            type: object
                          privileged:
                            description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                            type: boolean
                          procMount:
                            description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                            type: string
                          readOnlyRootFilesystem:
                            description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                            type: boolean
                          runAsGroup:
                            description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                            format: int64
                            type: integer
                          runAsNonRoot:
                            description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                            type: boolean
                          runAsUser:
                            description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                            format: int64
                            type: integer
                          seLinuxOptions:
                            description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                            properties:
                              level:
                                description: Level is SELinux level label that applies to the container.
                                type: string
                              role:
                                description: Role is a SELinux role label that applies to the container.
                                type: string
                              type:
                                description: Type is a SELinux type label that applies to the container.
                                type: string
                              user:
                                description: User is a SELinux user label that applies to the container.
                                type: string
                            type: object
                          seccompProfile:
                            description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                            properties:
                              localhostProfile:
                                description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                                type: string
                              type:
                                description: "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                                type: string
                            required:
                              - type
                            type: object
                          windowsOptions:
                            description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                            properties:
                              gmsaCredentialSpec:
                                description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                                type: string
                              gmsaCredentialSpecName:
                                description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                type: string
                              hostProcess:
                                description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                                type: boolean
                              runAsUserName:
                                description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                                type: string
                            type: object
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        type: object
                      podSecurityContext:
                        description: PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
                        properties:
                          fsGroup:
                            description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows."
                            format: int64
                            type: integer
                          fsGroupChangePolicy:
                            description: 'fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.'
                            type: string
                          runAsGroup:
                            description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
                            format: int64
                            type: integer
                          runAsNonRoot:
                            description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                            type: boolean
                          runAsUser:
                            description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
                            format: int64
                            type: integer
                          seLinuxOptions:
                            description: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
                            properties:
                              level:
                                description: Level is SELinux level label that applies to the container.
                                type: string
                              role:
                                description: Role is a SELinux role label that applies to the container.
                                type: string
                              type:
                                description: Type is a SELinux type label that applies to the container.
                                type: string
                              user:
                                description: User is a SELinux user label that applies to the container.
                                type: string
                            type: object
                          seccompProfile:
                            description: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
                            properties:
                              localhostProfile:
                                description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                                type: string
                              type:
                                description: "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                                type: string
                            required:
                              - type
                            type: object
                          supplementalGroups:
                            description: A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
                            items:
                              format: int64
                              type: integer
                            type: array
                          sysctls:
                            description: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
                            items:
                              description: Sysctl defines a kernel parameter to be set
                              properties:
                                name:
                                  description: Name of a property to set
                                  type: string
                                value:
                                  description: Value of a property to set
                                  type: string
                              required:
                                - name
                                - value
                              type: object
                            type: array
                          windowsOptions:
                            description: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                            properties:
                              gmsaCredentialSpec:
                                description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                                type: string
                              gmsaCredentialSpecName:
                                description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                type: string
                              hostProcess:
                                description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                                type: boolean
                              runAsUserName:
                                description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                                type: string
                            type: object
                        type: object
                      priorityClassName:
                        type: string
                      resources:
                        description: ResourceRequirements describes the compute resource requirements.
                        properties:
                          claims:
                            description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers."
                            items:
                              description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                              properties:
                                name:
                                  description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                                  type: string
                              required:
                                - name
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                              - name
                            x-kubernetes-list-type: map
                          limits:
                            additionalProperties: false
                            description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties: false
                            description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      runtimeClassName:
                        type: string
                      schedulerName:
                        type: string
                      storageProvider:
                        description: BackupStorageProviderSpec represents set of settings to configure cloud provider.
                        properties:
                          bucket:
                            type: string
                          containerName:
                            description: A container name is a valid DNS name that conforms to the Azure naming rules.
                            type: string
                          credentialsSecret:
                            type: string
                          endpointUrl:
                            type: string
                          prefix:
                            type: string
                          region:
                            type: string
                          storageClass:
                            description: STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
                            type: string
                        required:
                          - credentialsSecret
                        type: object
                      tolerations:
                        items:
                          description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                      type:
                        description: BackupStorageType represents backup storage type.
                        type: string
                      verifyTLS:
                        type: boolean
                      volumeSpec:
                        description: VolumeSpec represents a specification to configure volume for underlying database.
                        properties:
                          emptyDir:
                            description: EmptyDir to use as data volume for mysql. EmptyDir represents a temporary directory that shares a pod's lifetime.
                            type: object
                          hostPath:
                            description: HostPath to use as data volume for mysql. HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.
                            properties:
                              path:
                                description: 'path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                                type: string
                              type:
                                description: 'type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                                type: string
                            required:
                              - path
                            type: object
                          persistentVolumeClaim:
                            description: PersistentVolumeClaim to specify PVC spec for the volume for mysql data. It has the highest level of precedence, followed by HostPath and EmptyDir. And represents the PVC specification.
                            properties:
                              accessModes:
                                description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                items:
                                  type: string
                                type: array
                              dataSource:
                                description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.'
                                properties:
                                  apiGroup:
                                    description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                    type: string
                                  kind:
                                    description: Kind is the type of resource being referenced
                                    type: string
                                  name:
                                    description: Name is the name of resource being referenced
                                    type: string
                                required:
                                  - kind
                                  - name
                                type: object
                                x-kubernetes-map-type: atomic
                              dataSourceRef:
                                description: 'dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn''t specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn''t set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.'
                                properties:
                                  apiGroup:
                                    description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                    type: string
                                  kind:
                                    description: Kind is the type of resource being referenced
                                    type: string
                                  name:
                                    description: Name is the name of resource being referenced
                                    type: string
                                  namespace:
                                    description: Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                    type: string
                                required:
                                  - kind
                                  - name
                                type: object
                              resources:
                                description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                properties:
                                  claims:
                                    description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers."
                                    items:
                                      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                                      properties:
                                        name:
                                          description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                                          type: string
                                      required:
                                        - name
                                      type: object
                                    type: array
                                    x-kubernetes-list-map-keys:
                                      - name
                                    x-kubernetes-list-type: map
                                  limits:
                                    additionalProperties: false
                                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                    type: object
                                  requests:
                                    additionalProperties: false
                                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                    type: object
                                type: object
                              selector:
                                description: selector is a label query over volumes to consider for binding.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                    items:
                                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                        - key
                                        - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              storageClassName:
                                description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                type: string
                              volumeMode:
                                description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                                type: string
                              volumeName:
                                description: volumeName is the binding reference to the PersistentVolume backing this claim.
                                type: string
                            type: object
                        type: object
                    required:
                      - type
                    type: object
                  type: object
              type: object
            clusterSize:
              description: ClusterSize is amount of nodes that required for the cluster. A database starts in cluster mode if clusterSize >= 3.
              format: int32
              type: integer
            databaseConfig:
              description: DatabaseConfig contains a config settings for the specified database.
              type: string
            databaseImage:
              description: DatabaseVersion sets from version service and uses the recommended version by default.
              type: string
            databaseType:
              description: Database type stands for supported databases by the PMM API Now it's pxc or psmdb types but we can extend it.
              type: string
            dbInstance:
              description: DBInstance represents resource requests for a database cluster.
              properties:
                cpu:
                  anyOf:
                    - type: integer
                    - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                diskSize:
                  anyOf:
                    - type: integer
                    - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                memory:
                  anyOf:
                    - type: integer
                    - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                storageClassName:
                  type: string
              type: object
            loadBalancer:
              description: LoadBalancer contains a load balancer settings. For PXC it's haproxy or proxysql. For PSMDB it's mongos.
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  type: object
                configuration:
                  type: string
                exposeType:
                  description: Service Type string describes ingress methods for a service
                  type: string
                image:
                  type: string
                loadBalancerSourceRanges:
                  items:
                    type: string
                  type: array
                resources:
                  description: ResourceRequirements describes the compute resource requirements.
                  properties:
                    claims:
                      description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers."
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                            type: string
                        required:
                          - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                        - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                  type: object
                size:
                  format: int32
                  type: integer
                trafficPolicy:
                  description: ServiceExternalTrafficPolicyType describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
                  type: string
                type:
                  description: LoadBalancerType contains supported loadbalancers. It can be proxysql or haproxy for PXC clusters, mongos for PSMDB clusters or pgbouncer for Postgresql clusters.
                  type: string
              type: object
            monitoring:
              description: Monitoring contains a monitoring settings.
              properties:
                containerSecurityContext:
                  description: SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
                  properties:
                    allowPrivilegeEscalation:
                      description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                      type: boolean
                    capabilities:
                      description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                      properties:
                        add:
                          description: Added capabilities
                          items:
                            description: Capability represent POSIX capabilities type
                            type: string
                          type: array
                        drop:
                          description: Removed capabilities
                          items:
                            description: Capability represent POSIX capabilities type
                            type: string
                          type: array
                      type: object
                    privileged:
                      description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                      type: boolean
                    procMount:
                      description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                      type: string
                    readOnlyRootFilesystem:
                      description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                      type: boolean
                    runAsGroup:
                      description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                      format: int64
                      type: integer
                    runAsNonRoot:
                      description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                      type: boolean
                    runAsUser:
                      description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                      format: int64
                      type: integer
                    seLinuxOptions:
                      description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                      properties:
                        level:
                          description: Level is SELinux level label that applies to the container.
                          type: string
                        role:
                          description: Role is a SELinux role label that applies to the container.
                          type: string
                        type:
                          description: Type is a SELinux type label that applies to the container.
                          type: string
                        user:
                          description: User is a SELinux user label that applies to the container.
                          type: string
                      type: object
                    seccompProfile:
                      description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                      properties:
                        localhostProfile:
                          description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                          type: string
                        type:
                          description: "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                          type: string
                      required:
                        - type
                      type: object
                    windowsOptions:
                      description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                      properties:
                        gmsaCredentialSpec:
                          description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                          type: string
                        gmsaCredentialSpecName:
                          description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                          type: string
                        hostProcess:
                          description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                          type: boolean
                        runAsUserName:
                          description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                          type: string
                      type: object
                  type: object
                imagePullPolicy:
                  description: PullPolicy describes a policy for if/when to pull a container image
                  type: string
                pmm:
                  description: PMMSpec contains PMM settings.
                  properties:
                    image:
                      type: string
                    login:
                      type: string
                    password:
                      type: string
                    publicAddress:
                      type: string
                    serverHost:
                      type: string
                    serverUser:
                      type: string
                  type: object
                resources:
                  description: ResourceRequirements describes the compute resource requirements.
                  properties:
                    claims:
                      description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers."
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                            type: string
                        required:
                          - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                        - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                  type: object
                runtimeClassName:
                  type: string
              type: object
            pause:
              description: Pause represents is a cluster paused or not.
              type: boolean
            secretsName:
              description: SecretsName contains name of a secrets file for a database cluster.
              type: string
          required:
            - clusterSize
            - databaseConfig
            - databaseImage
            - databaseType
            - dbInstance
          type: object
        status:
          description: DatabaseClusterStatus defines the observed state of Database.
          properties:
            host:
              type: string
            message:
              type: string
            ready:
              format: int32
              type: integer
            size:
              format: int32
              type: integer
            status:
              description: AppState is used to represent cluster's state.
              type: string
          type: object
      type: object


    # -------------------------
    # DatabaseClusterRestore spec is imported from the everest operator,
    # please do not edit the definition below manually
    # -------------------------
    DatabaseClusterRestore:
      description: DatabaseClusterRestore is the Schema for the databaseclusterrestores
        API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
          properties:
            backupName:
              type: string
            backupSource:
              description: BackupSource represents settings of a source where to
                get a backup to run restoration.
              properties:
                azure:
                  description: BackupStorageProviderSpec represents set of settings
                    to configure cloud provider.
                  properties:
                    bucket:
                      type: string
                    containerName:
                      description: A container name is a valid DNS name that conforms
                        to the Azure naming rules.
                      type: string
                    credentialsSecret:
                      type: string
                    endpointUrl:
                      type: string
                    prefix:
                      type: string
                    region:
                      type: string
                    storageClass:
                      description: STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP
                        Hot (Frequently accessed or modified data), Cool (Infrequently
                        accessed or modified data), Archive (Rarely accessed or
                        modified data) for Azure.
                      type: string
                  required:
                    - credentialsSecret
                  type: object
                destination:
                  type: string
                image:
                  type: string
                s3:
                  description: BackupStorageProviderSpec represents set of settings
                    to configure cloud provider.
                  properties:
                    bucket:
                      type: string
                    containerName:
                      description: A container name is a valid DNS name that conforms
                        to the Azure naming rules.
                      type: string
                    credentialsSecret:
                      type: string
                    endpointUrl:
                      type: string
                    prefix:
                      type: string
                    region:
                      type: string
                    storageClass:
                      description: STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP
                        Hot (Frequently accessed or modified data), Cool (Infrequently
                        accessed or modified data), Archive (Rarely accessed or
                        modified data) for Azure.
                      type: string
                  required:
                    - credentialsSecret
                  type: object
                sslInternalSecretName:
                  type: string
                sslSecretName:
                  type: string
                storage_type:
                  description: BackupStorageType represents backup storage type.
                  type: string
                storageName:
                  type: string
                vaultSecretName:
                  type: string
              required:
                - storage_type
              type: object
            databaseCluster:
              type: string
            databaseType:
              description: EngineType stands for the supported database engines.
                Right now it's only pxc and psmdb. However, it can be ps, pg and
                any other source.
              type: string
          required:
            - databaseCluster
            - databaseType
          type: object
        status:
          description: DatabaseClusterRestoreStatus defines the observed state of
            DatabaseClusterRestore.
          properties:
            completed:
              format: date-time
              type: string
            conditions:
              items:
                description: "Condition contains details for one aspect of the current
                        state of this API Resource. --- This struct is intended for direct
                        use as an array at the field path .status.conditions.  For example,
                        \n type FooStatus struct{ // Represents the observations of a
                        foo's current state. // Known .status.conditions.type are: \"Available\",
                        \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                        // +listType=map // +listMapKey=type Conditions []metav1.Condition
                        `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                        protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                properties:
                  lastTransitionTime:
                    description: lastTransitionTime is the last time the condition
                      transitioned from one status to another. This should be when
                      the underlying condition changed.  If that is not known, then
                      using the time when the API field changed is acceptable.
                    format: date-time
                    type: string
                  message:
                    description: message is a human readable message indicating
                      details about the transition. This may be an empty string.
                    maxLength: 32768
                    type: string
                  observedGeneration:
                    description: observedGeneration represents the .metadata.generation
                      that the condition was set based upon. For instance, if .metadata.generation
                      is currently 12, but the .status.conditions[x].observedGeneration
                      is 9, the condition is out of date with respect to the current
                      state of the instance.
                    format: int64
                    minimum: 0
                    type: integer
                  reason:
                    description: reason contains a programmatic identifier indicating
                      the reason for the condition's last transition. Producers
                      of specific condition types may define expected values and
                      meanings for this field, and whether the values are considered
                      a guaranteed API. The value should be a CamelCase string.
                      This field may not be empty.
                    maxLength: 1024
                    minLength: 1
                    pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                    type: string
                  status:
                    description: status of the condition, one of True, False, Unknown.
                    enum:
                      - "True"
                      - "False"
                      - Unknown
                    type: string
                  type:
                    description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      --- Many .condition.type values are consistent across resources
                      like Available, but because arbitrary conditions can be useful
                      (see .node.status.conditions), the ability to deconflict is
                      important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                    maxLength: 316
                    pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                    type: string
                required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                type: object
              type: array
            destination:
              type: string
            lastscheduled:
              format: date-time
              type: string
            message:
              type: string
            state:
              description: RestoreState represents state of restoration.
              type: string
            storageName:
              type: string
          type: object
      type: object

    # -------------------------
    # io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2 spec is imported from k8s API,
    # please do not edit the definition below manually
    # -------------------------
    io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2:
      description: Status is a return value for calls that don't return other objects.
      type: object
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        code:
          description: Suggested HTTP return code for this status, 0 if not set.
          type: integer
          format: int32
        details:
          description: Extended data associated with the reason.  Each reason may define
            its own extended details. This field is optional and the data returned is
            not guaranteed to conform to any schema except that defined by the reason
            type.
          "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails_v2"
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits requests
            to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          description: A human-readable description of the status of this operation.
          type: string
        metadata:
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        reason:
          description: A machine-readable description of why this operation is in the
            "Failure" status. If this value is empty there is no information available.
            A Reason clarifies an HTTP status code but does not override it.
          type: string
        status:
          description: 'Status of the operation. One of: "Success" or "Failure". More
            info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
          type: string

    # -------------------------
    # io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta spec is imported from k8s API,
    # please do not edit the definition below manually
    # -------------------------
    io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
      description: ListMeta describes metadata that synthetic resources must have, including
        lists and various status objects. A resource may have only one of {ObjectMeta,
        ListMeta}.
      type: object
      properties:
        continue:
          description: continue may be set if the user set a limit on the number of items
            returned, and indicates that the server has more data available. The value
            is opaque and may be used to issue another request to the endpoint that served
            this list to retrieve the next set of available objects. Continuing a consistent
            list may not be possible if the server configuration has changed or more than
            a few minutes have passed. The resourceVersion field returned when using this
            continue value will be identical to the value in the first response, unless
            you have received this token from an error message.
          type: string
        remainingItemCount:
          description: remainingItemCount is the number of subsequent items in the list
            which are not included in this list response. If the list request contained
            label or field selectors, then the number of remaining items is unknown and
            the field will be left unset and omitted during serialization. If the list
            is complete (either because it is not chunking or because this is the last
            chunk), then there are no more remaining items and this field will be left
            unset and omitted during serialization. Servers older than v1.15 do not set
            this field. The intended use of the remainingItemCount is *estimating* the
            size of a collection. Clients should not rely on the remainingItemCount to
            be set or to be exact.
          type: integer
          format: int64
        resourceVersion:
          description: 'String that identifies the server''s internal version of this
            object that can be used by clients to determine when objects have changed.
            Value must be treated as opaque by clients and passed unmodified back to the
            server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
          type: string
        selfLink:
          description: |-
            selfLink is a URL representing this object. Populated by the system. Read-only.

            DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
          type: string

    # -------------------------
    # io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails_v2 spec is imported from k8s API,
    # please do not edit the definition below manually
    # -------------------------
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails_v2:
      description: StatusDetails is a set of additional properties that MAY be set by
        the server to provide additional information about a response. The Reason field
        of a Status object defines what attributes will be set. Clients must ignore fields
        that do not match the defined type of each attribute, and should assume that any
        attribute may be empty, invalid, or under defined.
      type: object
      properties:
        causes:
          description: The Causes array includes more details associated with the StatusReason
            failure. Not all StatusReasons may provide detailed causes.
          type: array
          items:
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
        group:
          description: The group attribute of the resource associated with the status
            StatusReason.
          type: string
        kind:
          description: 'The kind attribute of the resource associated with the status
            StatusReason. On some operations may differ from the requested resource Kind.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: The name attribute of the resource associated with the status StatusReason
            (when there is a single name which can be described).
          type: string
        retryAfterSeconds:
          description: If specified, the time in seconds before the operation should be
            retried. Some errors may indicate the client must take an alternate action
            - for those errors this field may indicate how long to wait before taking
            the alternate action.
          type: integer
          format: int32
        uid:
          description: 'UID of the resource. (when there is a single resource which can
            be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string

    # -------------------------
    # io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause spec is imported from k8s API,
    # please do not edit the definition below manually
    # -------------------------
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
      description: StatusCause provides more information about an api.Status failure,
        including cases when multiple errors are encountered.
      type: object
      properties:
        field:
          description: |-
            The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
          type: string
        message:
          description: A human-readable description of the cause of the error.  This field
            may be presented as-is to a reader.
          type: string
        reason:
          description: A machine-readable description of the cause of the error. If this
            value is empty there is no information available.
          type: string
